!function(){"use strict";var e,t={64:function(e,t,s){var r=s(692),i=s.n(r);i()((function(){const e=i()(".header__main-c-btn"),t=i()(".header__mobile"),s="_opened",r=document.querySelector("html");e.on("click",(e=>{e.target.classList.contains(s)?(e.target.classList.remove(s),t.fadeOut().removeClass(s),r.classList.remove("lock")):(e.target.classList.add(s),t.fadeIn().addClass(s),r.classList.add("lock"))})),t.on("click",(i=>{i.target.classList.contains("header__mobile-wrp")&&(e.removeClass(s),t.fadeOut().removeClass(s),r.classList.remove("lock"))}))}));var n=s(236),o=s(567);const a=function(e){return window.innerWidth>768?.005208335*window.innerWidth*e:100/375*(.05*window.innerWidth)*e};class l{constructor(e,t){this._form=e,this._form.setAttribute("novalidate",!0),this._inputContainerSelector="form-input",this._inputErrorMsgSelector="input-text-error-msg",this._inputErrorSelector="_error",this._inputPlaceholderSelector="input-text-placeholder",this.submitForm=t,this._inputs=this._form.querySelectorAll("input, textarea"),this._inputsData=this._createInputData(this._inputs),this._passwordInput=Array.from(this._inputs).find((e=>"password"==e.name)),this._passwordRepeatInput=Array.from(this._inputs).find((e=>"passwordRepeat"==e.name)),this._submitBtn=this._form.querySelector('button[type="submit"]'),this.initForm()}_inputHandler(e){this._inputsData[e.name].value=e.value,this._validation(e),e.placeholder&&(e.value?e.closest("."+this._inputContainerSelector).querySelector("."+this._inputPlaceholderSelector).style.display="none":e.closest("."+this._inputContainerSelector).querySelector("."+this._inputPlaceholderSelector).style.display="block")}_validation(e){switch(e.name){case"name":this._checkInputValid(e,/^[A-Za-zА-Яа-яЁё ]+$/,"Допустим ввод только букв");break;case"email":this._checkInputValid(e,/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,"Поле должно быть в формате email@domain.com");break;case"phone":this._checkInputValid(e,/^\+(7|375) \(\d{3}\) \d{3}-\d{2}-\d{2}$/,"Формат номера телефона +7 (888) 888-88-88");break;case"password":this._checkInputValid(e,/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)[A-Za-z\d]{8,}$/,"Не корректный пароль");break;default:this._checkInputValid(e)}}_checkInputValid(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"че то не так написал, исправляй";if(!this._inputsData[e.name].isRequired)return;const r=e.closest("."+this._inputContainerSelector),i=r.querySelector("."+this._inputErrorMsgSelector);this._inputsData[e.name].isRequired&&!this._inputsData[e.name].value?(console.log("required"),r.classList.add(this._inputErrorSelector),i.textContent="Это поле обязательно.",this._inputsData[e.name].isValid=!1):"passwordRepeat"==e.name?(this._validation(this._passwordInput),e.value!==this._inputsData.password.value?(r.classList.add(this._inputErrorSelector),i.textContent="Пароли не совпадают",this._inputsData[e.name].isValid=!1):(this._inputsData[e.name].isValid=!0,r.classList.remove(this._inputErrorSelector),i.textContent=" ")):"checkbox"==e.getAttribute("type")||"radio"==e.getAttribute("type")?(console.log("checkbox and radio"),this._inputsData[e.name].isValid=!this._inputsData[e.name].isRequired||e.checked,e.checked?r.classList.remove(this._inputErrorSelector):r.classList.add(this._inputErrorSelector)):t&&!t.test(e.value)?(r.classList.add(this._inputErrorSelector),i.textContent=s,this._inputsData[e.name].isValid=!1):(console.log("successfull"),this._inputsData[e.name].isValid=!0,r.classList.remove(this._inputErrorSelector),i.textContent=" ")}_onSubmit(e){let t=!0;for(const e of this._inputs)this._inputHandler(e),this._inputsData[e.name].isValid||(t=!1);t&&this._form.submit()}_createInputData(e){let t={};for(const s of e){if(s.setAttribute("autocomplete","off"),s.placeholder){const e=s.closest("."+this._inputContainerSelector).querySelector("."+this._inputPlaceholderSelector);e.textContent=s.placeholder,s.dataset.required&&e.setAttribute("data-end"," *")}if("password"==s.name){const e=s.closest("."+this._inputContainerSelector).querySelector(".input-text-password");e&&e.addEventListener("click",(e=>{e.preventDefault(),this._passowrHide()}))}if("file"==s.type&&s.addEventListener("change",(e=>{this._fileHandler(e)})),!t[s.name]){const e=!s.dataset.required,r=!!s.dataset.required;let i=s.dataset.defaultv||s.checked||s.value||"";"checkbox"!=s.type&&"radio"!=s.type||(i=s.checked),t[s.name],t[s.name]={value:i,isValid:e,isRequired:r}}}return t}_fileHandler(e){const t=e.target.closest("."+this._inputContainerSelector);e.target.value?(t.classList.add("_active"),t.querySelector(".input-file-got").querySelector(".input-file-text").textContent=e.target.value.split("\\").slice(-1)):t.classList.remove("_active")}_passowrHide(){"text"==this._passwordInput.type?(this._passwordInput.setAttribute("type","password"),this._passwordRepeatInput.setAttribute("type","password")):(this._passwordInput.setAttribute("type","text"),this._passwordRepeatInput.setAttribute("type","text"))}initForm(){this._form.noValidate=!0,this._inputs.forEach((e=>{e.addEventListener("input",(e=>this._inputHandler(e.target))),e.addEventListener("blur",(e=>this._inputHandler(e.target))),e.addEventListener("change",(e=>this._inputHandler(e.target)))})),this._submitBtn&&(this._submitBtn.setAttribute("type","button"),this._submitBtn.addEventListener("click",(e=>{this._onSubmit(e)})))}}var c=s(660),d=s.n(c);const u=new(d())("+7 (999) 999-99-99",{placeholder:""}),p=new(d())("+375 (999) 999-99-99",{placeholder:""}),_=new(d())("+7 (999) 999-99-99",{placeholder:""}),h={ru:u,br:p,kz:_};function m(e){console.log(e)}const f=new Event("input");class g{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this._container="string"==typeof e?document.querySelector(e):e,this._initState=t,this._btnSelector=".switcher-btn",this._slideSelector=".switcher-slide",this._datasetBtn="switchto",this._datasetSlide="switchslide",this._btns=this._initBtns(this._container),this._slides=this._initSlides(this._container)}_initBtns(e){const t=e.querySelectorAll(this._btnSelector);return t.forEach(((e,t)=>{e.setAttribute("data-"+this._datasetBtn,t),"INPUT"==e.tagName?e.addEventListener("change",(t=>{e.setAttribute("checked",!0),this._switcher(t)})):e.addEventListener("click",(e=>{e.preventDefault(),this._switcher(e)})),null!==this._initState&&t===this._initState&&e.classList.add("_opened")})),t}_initSlides(e){const t=e.querySelectorAll(this._slideSelector);return t.forEach(((e,t)=>{e.setAttribute("data-"+this._datasetSlide,t),null!==this._initState&&t!==this._initState&&(e.style.display="none")})),t}_switcher(e){e.currentTarget.classList.contains("_opened")||(e=e.currentTarget,this._slides.forEach((t=>{t.dataset[this._datasetSlide]==e.dataset[this._datasetBtn]?t.style.display="block":t.style.display="none"})),this._btns.forEach((t=>{t.dataset[this._datasetBtn]==e.dataset[this._datasetBtn]?t.classList.add("_opened"):t.classList.contains("_opened")&&t.classList.remove("_opened")})))}}i()((function(){i()(document).on("click",(e=>{e.target.classList.contains("drop-down-target")&&(e.target.classList.toggle("_opened"),e.target.closest(".drop-down-container").classList.toggle("_opened"))})),function(){const e=document.querySelectorAll(".form");e&&e.forEach((e=>{var t;new l(e,m),u.mask(i()(e).find('input[name="phone"]')),t=e,i()(t).find(".input-phone__select-list-btn").on("click",(e=>{e.preventDefault();const{mask:t}=e.target.dataset,s=i()(e.target.closest(".input-phone")),r=e.target.children[0].getAttribute("src");i()(".input-phone__select-current-flag").attr("src",r),h[t].mask(s.find('input[name="phone"]')),s.find(".drop-down-target").trigger("click")}))}))}(),function(){const e=document.querySelectorAll(".complects__c-slider");e&&e.forEach((e=>{new n.A(e,{modules:[o.Vx,o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:5,slidesPerGroup:1}},pagination:{el:e.querySelector(".complects__c-slider-pagination")},navigation:{prevEl:e.querySelector(".complects__c-slider-prev"),nextEl:e.querySelector(".complects__c-slider-next")}})}));const t=document.querySelector(".why-choice__c-slider");t&&new n.A(t,{modules:[o.dK,o.xA],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),grid:{rows:1},breakpoints:{768:{slidesPerView:5,slidesPerGroup:2,grid:{rows:2,fill:"row"}}},pagination:{el:".why-choice__c-slider-pagination"}});const s=document.querySelector(".ctagories__c-slider");s&&new n.A(s,{modules:[o.dK,o.xA],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),grid:{rows:1},breakpoints:{768:{slidesPerView:4,slidesPerGroup:2,grid:{rows:2,fill:"row"}}},pagination:{el:".ctagories__c-slide-pagination"}});const r=document.querySelector(".special-offer__c-slider");r&&new n.A(r,{modules:[o.Vx,o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:5,slidesPerGroup:1}},pagination:{el:".special-offer__c-slider-pagination"},navigation:{prevEl:".special-offer__c-slider-prev",nextEl:".special-offer__c-slider-next"}});const i=document.querySelector(".main-heading__c-main-slider");i&&new n.A(i,{modules:[o.dK,o.Ij],loop:!0,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),grabCursor:!1,autoplay:{delay:3e3,pauseOnMouseEnter:!0},pagination:{el:".header-pagination",clickable:!0}});const l=document.querySelector(".defense-work__c-slider");l&&new n.A(l,{modules:[o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:3,slidesPerGroup:1}},pagination:{el:".defense-work-pagination"}});const c=document.querySelector(".catalog-head-swiper");c&&new n.A(c,{modules:[o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:3,slidesPerGroup:1}},pagination:{el:".catalog-head-pagination"}});const d=document.querySelector(".catalog-defense__c-right");d&&new n.A(d,{modules:[o.dK,o.xA],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),grid:{rows:1},breakpoints:{768:{slidesPerView:3,slidesPerGroup:2,grid:{rows:2,fill:"row"}}},pagination:{el:".catalog-defense-pagination"}});const u=document.querySelectorAll(".category-fs-slider");u&&u.forEach((e=>{new n.A(e,{modules:[o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:3,slidesPerGroup:1}},pagination:{el:e.closest(".category-fs").querySelector(".category-fs-pagination")}})}));const p=document.querySelector(".choice-system__c-left-slider");if(p){const e=new n.A(p,{modules:[o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),allowTouchMove:!1,preventInteractionOnTransition:!0,touchMoveStopPropagation:!0,pagination:{el:".choice-system__c-left-top-pagination",type:"fraction"}});p.querySelectorAll(".choice-system__c-left-slider-form-e-next").forEach((t=>{t.addEventListener("click",(()=>{e.slideNext()}))}))}const _=document.querySelectorAll(".news-detail-slider");_&&_.forEach((e=>{new n.A(e.querySelector(".swiper"),{modules:[o.Vx,o.dK],loop:!1,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:3}},navigation:{prevEl:e.querySelector(".btn-swiper_left"),nextEl:e.querySelector(".btn-swiper_right")},pagination:{el:e.querySelector(".slider-pagination")}})}))}(),function(){const e=document.querySelectorAll(".select");e&&e.forEach((e=>{const t=e.querySelectorAll(".select__items-list-e");t.forEach((s=>{s.addEventListener("click",(s=>{const r=e.querySelector(".select__target-input");r.value=s.target.dataset.value||s.target.textContent,r.dispatchEvent(f),t.forEach((e=>e.removeAttribute("disabled"))),s.target.setAttribute("disabled","true"),e.querySelector(".drop-down-target").click()}))}))}))}(),function(){const e=document.querySelector(".mobile-nav");if(!e)return;let t=0;document.addEventListener("scroll",(()=>{window.scrollY>t+50?(e.classList.add("_opened"),t=window.scrollY):window.scrollY<t-50&&(e.classList.remove("_opened"),t=window.scrollY)}))}(),function(){if(!document.querySelector(".catalog-current"))return;const e=document.querySelector(".catalog-current__items-top-opener"),t=document.querySelector(".catalog-current__filter-closer"),s=i()("html"),r=i()(".catalog-current__filter");e.addEventListener("click",(()=>{s.addClass("lock"),r.fadeIn(),r.addClass("_opened")})),t.addEventListener("click",(()=>{s.removeClass("lock"),r.fadeOut(),r.removeClass("_opened")})),window.addEventListener("resize",(()=>{!r.hasClass("_opened")&&s.hasClass("lock")&&s.removeClass("lock")}))}(),function(){const e=document.querySelector(".card-page-top__c-img-top"),t=document.querySelector(".card-page-top__c-img-bottom");if(!e||!t)return;const s=new n.A(e,{loop:!0,slidesPerView:1,slidesPerGroup:1,spaceBetween:a(3),allowTouchMove:!1,preventInteractionOnTransition:!0,touchMoveStopPropagation:!0});new n.A(t,{modules:[o.Vx,o.dK],loop:!1,slidesPerView:3,slidesPerGroup:1,spaceBetween:a(1),breakpoints:{768:{slidesPerView:4,slidesPerGroup:1}},pagination:{el:".card-page-top__c-img-bottom-pagination"},navigation:{prevEl:".card-page-top__c-img-bottom-prev",nextEl:".card-page-top__c-img-bottom-next"}}),t.querySelectorAll(".card-page-top__c-img-bottom-slide").forEach(((e,t)=>{e.addEventListener("click",(()=>{s.slideTo(t)}))}))}(),function(){const e=document.querySelector(".card-page-description__c-slider"),t=document.querySelectorAll(".card-page-description__c-nav-btn");if(!e||!t)return;const s=new n.A(e,{loop:!1,slidesPerView:1,spaceBetween:a(3),allowTouchMove:!1,preventInteractionOnTransition:!0,touchMoveStopPropagation:!0});t.forEach(((e,r)=>{e.addEventListener("click",(e=>{s.slideTo(r),t.forEach((e=>e.classList.remove("_opened"))),e.target.classList.add("_opened")}))}))}(),function(){if(!document.querySelector(".feedback__c-slider-e-body"))return;const e=i()(".feedback__c-slider"),t=".feedback__c-slider-e-body",s=".feedback__c-slider-e-body-txt",r="_closed";document.querySelectorAll(s).forEach((e=>{e.offsetHeight>150&&((e=i()(e)).addClass(r),console.log(e.closest(t)),e.closest(t).append('<button class="feedback__c-slider-e-body-opener btn-nav btn-nav_ul txt18">Развернуть</button>'))})),e.on("click",(e=>{if(!e.target.classList.contains("feedback__c-slider-e-body-opener"))return;const i=e.target.closest(t);e.target.closest(t).classList.contains("_opened")?(i.classList.remove("_opened"),i.querySelector(s).classList.add(r),e.target.textContent="развернуть"):(i.classList.add("_opened"),i.querySelector(s).classList.remove(r),e.target.textContent="свернуть")}))}(),function(){const e=document.querySelector(".feedback__c-slider");e&&new n.A(e,{modules:[o.Vx,o.dK],loop:!1,allowSlidePrev:1,slidesPerGroup:1,spaceBetween:a(3),breakpoints:{768:{slidesPerView:3,slidesPerGroup:1}},navigation:{prevEl:".feedback__c-slider-prev",nextEl:".feedback__c-slider-next"},pagination:{el:".feedback-pagination"}})}(),function(){if(!document.querySelector(".sign-up"))return;const e=document.querySelectorAll(".sign-form-switcher"),t=document.querySelector(".sign-up__c-slider");e.forEach((e=>{e.addEventListener("change",(e=>{t.style.transform=`translate(calc(-${e.target.dataset.slideto}00% - ${50*e.target.dataset.slideto}px), 0)`}))}))}(),function(){const e=i()(".modal-opener"),t=i()(".modal-closer"),s=i()("html");e&&t&&(e.on("click",(e=>{const{modal:t}=e.currentTarget.dataset;i()(`.modal-${t}`).fadeIn().addClass("_opened"),s.addClass("lock")})),t.on("click",(e=>{const{classList:t}=e.target;t.contains("modal-closer")&&(t.contains("modal")?i()(e.target).fadeOut().removeClass("_opened"):i()(e.target.closest(".modal")).fadeOut().removeClass("_opened"),s.removeClass("lock"))})))}(),function(){const e=document.querySelector(".switcher-delivery");e&&new g(e,0);const t=document.querySelector(".switcher-userdata");t&&new g(t,0);const s=document.querySelector(".modal-cdek");s&&new g(s,0);const r=document.querySelector(".support-list");r&&new g(r,0);const i=document.querySelector(".user-page");i&&new g(i,0);const n=document.querySelector(".modal-sign-reset-switcher");n&&new g(n,0)}(),function(){const e=document.querySelector(".selection__c");if(!e)return;let t=1;const s=e.querySelector(".selection__c-btn"),r=e.querySelector(".selection__c-top-count"),i=e.querySelectorAll(".selection-add-item"),n=e.querySelectorAll(".item-list");s.addEventListener("click",(()=>{t++,e.setAttribute("data-step",t),r.textContent=t,t>3&&(s.textContent="Добавить в корзину")})),i.forEach((e=>{e.addEventListener("click",(e=>{const t=e.currentTarget.closest("div").querySelector("ul"),s=t.querySelectorAll("li"),r=s[0].cloneNode(!0),i=r.querySelector(".item-count");r.classList.remove("item-origin"),i&&(i.textContent=s.length+1),t.appendChild(r)}))})),n.forEach((e=>{e.addEventListener("click",(e=>{(e=e.target).classList.contains("item-selfremove")&&e.closest("li").remove()}))}))}(),function(){const e=i()(".input-4x-code");if(!e)return;const t=e.find('input[name="code"]'),s=(e.find(".input-text-error-msg"),e.find('input[name="pincode"]'));e.on("submit",(e=>{e.preventDefault()})),t.on("keydown",(e=>{const t=e.key;if(t==t.replace(/[0-9]/,""))return i()(e.currentTarget).val(""),!1;i()(e.currentTarget).val("");let r=Array.from(s.val());r[e.target.dataset.index]=t,r=r.join(""),s.val(r)})),t.on("keyup",(function(r){let n=i()(this).val();if(n==n.replace(/[0-9]/,""))return i()(this).val(""),!1;r.currentTarget.dataset.index<3&&t.eq(t.index(this)+1).focus(),s.val()==s.val().replace(/\*/g,"")&&e.trigger("submit")}))}(),document.querySelectorAll(".show-help").forEach((e=>{i()(e).find(".show-help-text")&&(e.addEventListener("mouseover",(e=>{i()(e.currentTarget).find(".show-help-text").fadeIn()})),e.addEventListener("mouseleave",(e=>{i()(e.currentTarget).find(".show-help-text").fadeOut()})))}))}))}},s={};function r(e){var i=s[e];if(void 0!==i)return i.exports;var n=s[e]={exports:{}};return t[e].call(n.exports,n,n.exports,r),n.exports}r.m=t,e=[],r.O=function(t,s,i,n){if(!s){var o=1/0;for(d=0;d<e.length;d++){s=e[d][0],i=e[d][1],n=e[d][2];for(var a=!0,l=0;l<s.length;l++)(!1&n||o>=n)&&Object.keys(r.O).every((function(e){return r.O[e](s[l])}))?s.splice(l--,1):(a=!1,n<o&&(o=n));if(a){e.splice(d--,1);var c=i();void 0!==c&&(t=c)}}return t}n=n||0;for(var d=e.length;d>0&&e[d-1][2]>n;d--)e[d]=e[d-1];e[d]=[s,i,n]},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,{a:t}),t},r.d=function(e,t){for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={792:0};r.O.j=function(t){return 0===e[t]};var t=function(t,s){var i,n,o=s[0],a=s[1],l=s[2],c=0;if(o.some((function(t){return 0!==e[t]}))){for(i in a)r.o(a,i)&&(r.m[i]=a[i]);if(l)var d=l(r)}for(t&&t(s);c<o.length;c++)n=o[c],r.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return r.O(d)},s=self.webpackChunkwebpack_example=self.webpackChunkwebpack_example||[];s.forEach(t.bind(null,0)),s.push=t.bind(null,s.push.bind(s))}();var i=r.O(void 0,[979,881,749],(function(){return r(64)}));i=r.O(i)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxFQUFvQlEsRUFBRVEsRUFBSSxTQUFTcUIsR0FBVyxPQUFvQyxJQUE3QkQsRUFBZ0JDLEVBQWdCLEVBR3JGLElBQUlDLEVBQXVCLFNBQVNDLEVBQTRCQyxHQUMvRCxJQUtJdkMsRUFBVW9DLEVBTFYzQixFQUFXOEIsRUFBSyxHQUNoQkMsRUFBY0QsRUFBSyxHQUNuQkUsRUFBVUYsRUFBSyxHQUdJbkssRUFBSSxFQUMzQixHQUFHcUksRUFBU2lDLE1BQUssU0FBU0MsR0FBTSxPQUErQixJQUF4QlIsRUFBZ0JRLEVBQVcsSUFBSSxDQUNyRSxJQUFJM0MsS0FBWXdDLEVBQ1p6QyxFQUFvQjRCLEVBQUVhLEVBQWF4QyxLQUNyQ0QsRUFBb0JPLEVBQUVOLEdBQVl3QyxFQUFZeEMsSUFHaEQsR0FBR3lDLEVBQVMsSUFBSWpDLEVBQVNpQyxFQUFRMUMsRUFDbEMsQ0FFQSxJQURHdUMsR0FBNEJBLEVBQTJCQyxHQUNyRG5LLEVBQUlxSSxFQUFTaE0sT0FBUTJELElBQ3pCZ0ssRUFBVTNCLEVBQVNySSxHQUNoQjJILEVBQW9CNEIsRUFBRVEsRUFBaUJDLElBQVlELEVBQWdCQyxJQUNyRUQsRUFBZ0JDLEdBQVMsS0FFMUJELEVBQWdCQyxHQUFXLEVBRTVCLE9BQU9yQyxFQUFvQlEsRUFBRUMsRUFDOUIsRUFFSW9DLEVBQXFCQyxLQUFrQyw0QkFBSUEsS0FBa0MsNkJBQUssR0FDdEdELEVBQW1Cak0sUUFBUTBMLEVBQXFCUyxLQUFLLEtBQU0sSUFDM0RGLEVBQW1CRyxLQUFPVixFQUFxQlMsS0FBSyxLQUFNRixFQUFtQkcsS0FBS0QsS0FBS0YsRyxJQy9DdkYsSUFBSUksRUFBc0JqRCxFQUFvQlEsT0FBRTdMLEVBQVcsQ0FBQyxJQUFJLElBQUksTUFBTSxXQUFhLE9BQU9xTCxFQUFvQixHQUFLLElBQ3ZIaUQsRUFBc0JqRCxFQUFvQlEsRUFBRXlDLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrX2V4YW1wbGUvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly93ZWJwYWNrX2V4YW1wbGUvLi9zcmMvanMvY29tcG9uZW50cy9oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlLy4vc3JjL2pzL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrX2V4YW1wbGUvLi9zcmMvanMvdXRpbHMvRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrX2V4YW1wbGUvLi9zcmMvanMvdXRpbHMvZm9ybXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlLy4vc3JjL2pzL3V0aWxzL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrX2V4YW1wbGUvLi9zcmMvanMvdXRpbHMvU3dpdGNoZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlLy4vc3JjL2pzL2Rldi96YXR6LmpzIiwid2VicGFjazovL3dlYnBhY2tfZXhhbXBsZS8uL3NyYy9qcy9jb21wb25lbnRzL2NhdGFsb2cuanMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlLy4vc3JjL2pzL2NvbXBvbmVudHMvY2FyZFZpZXcuanMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlLy4vc3JjL2pzL2NvbXBvbmVudHMvZmVlZGJhY2suanMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlLy4vc3JjL2pzL2NvbXBvbmVudHMvc2lnblVwLmpzIiwid2VicGFjazovL3dlYnBhY2tfZXhhbXBsZS8uL3NyYy9qcy9jb21wb25lbnRzL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrX2V4YW1wbGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnBhY2tfZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFja19leGFtcGxlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2tfZXhhbXBsZS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSBmdW5jdGlvbihyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpIHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGNodW5rSWRzID0gZGVmZXJyZWRbaV1bMF07XG5cdFx0dmFyIGZuID0gZGVmZXJyZWRbaV1bMV07XG5cdFx0dmFyIHByaW9yaXR5ID0gZGVmZXJyZWRbaV1bMl07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pOyB9KSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcclxuXHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IGhlYWRlck9wZW5lciA9ICQoJy5oZWFkZXJfX21haW4tYy1idG4nKSxcclxuICAgICAgICBoZWFkZXJNb2RhbCA9ICQoJy5oZWFkZXJfX21vYmlsZScpLFxyXG4gICAgICAgIG9wZW5lZCA9ICdfb3BlbmVkJyxcclxuICAgICAgICBodG1sID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpXHJcbiAgICAgICBcclxuXHJcbiAgICBoZWFkZXJPcGVuZXIub24oJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAgICAgaWYgKCFldi50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKG9wZW5lZCkpIHtcclxuICAgICAgICAgICAgZXYudGFyZ2V0LmNsYXNzTGlzdC5hZGQob3BlbmVkKVxyXG4gICAgICAgICAgICBoZWFkZXJNb2RhbC5mYWRlSW4oKS5hZGRDbGFzcyhvcGVuZWQpXHJcbiAgICAgICAgICAgIGh0bWwuY2xhc3NMaXN0LmFkZCgnbG9jaycpXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGV2LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKG9wZW5lZClcclxuICAgICAgICAgICAgaGVhZGVyTW9kYWwuZmFkZU91dCgpLnJlbW92ZUNsYXNzKG9wZW5lZClcclxuICAgICAgICAgICAgaHRtbC5jbGFzc0xpc3QucmVtb3ZlKCdsb2NrJylcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgaGVhZGVyTW9kYWwub24oJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2hlYWRlcl9fbW9iaWxlLXdycCcpKSB7XHJcbiAgICAgICAgICAgIGhlYWRlck9wZW5lci5yZW1vdmVDbGFzcyhvcGVuZWQpXHJcbiAgICAgICAgICAgIGhlYWRlck1vZGFsLmZhZGVPdXQoKS5yZW1vdmVDbGFzcyhvcGVuZWQpXHJcbiAgICAgICAgICAgIGh0bWwuY2xhc3NMaXN0LnJlbW92ZSgnbG9jaycpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbn0pIiwiZXhwb3J0IFx0Y29uc3QgcmVtID0gZnVuY3Rpb24gKHJlbSkge1xyXG4gIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+IDc2OCkge1xyXG4gICAgcmV0dXJuIDAuMDA1MjA4MzM1ICogd2luZG93LmlubmVyV2lkdGggKiByZW07XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vINCz0LTQtSAzNzUg0Y3RgtC+INGI0LjRgNC40L3QsCDQvNC+0LHQuNC70YzQvdC+0Lkg0LLQtdGA0YHQuNC4INC80LDQutC10YLQsFxyXG4gICAgcmV0dXJuICgxMDAgLyAzNzUpICogKDAuMDUgKiB3aW5kb3cuaW5uZXJXaWR0aCkgKiByZW07XHJcbiAgfVxyXG4gIFxyXG59XHJcblxyXG5leHBvcnQgbGV0IGJvZHlMb2NrU3RhdHVzID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCBsZXQgYm9keVVubG9jayA9IChkZWxheSA9IDUwMCkgPT4ge1xyXG4gIGxldCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gIGlmIChib2R5TG9ja1N0YXR1cykge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJzBweCc7XHJcbiAgICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpLnN0eWxlLnBhZGRpbmdSaWdodCA9ICcwcHgnO1xyXG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbG9jaycpO1xyXG4gICAgfSwgZGVsYXkpO1xyXG4gICAgYm9keUxvY2tTdGF0dXMgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBib2R5TG9ja1N0YXR1cyA9IHRydWU7XHJcbiAgICB9LCBkZWxheSk7XHJcbiAgfVxyXG59O1xyXG5leHBvcnQgbGV0IGJvZHlMb2NrID0gKGRlbGF5ID0gNTAwKSA9PiB7XHJcbiAgbGV0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcbiAgaWYgKGJvZHlMb2NrU3RhdHVzKSB7XHJcbiAgICBjb25zdCBnZXRTY3JvbGxiYXJXaWR0aCA9ICgpID0+IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgbGV0IHNjcm9sbFdpdGggPSBnZXRTY3JvbGxiYXJXaWR0aCgpO1xyXG4gICAgYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtzY3JvbGxXaXRofXB4YDtcclxuICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpLnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke3Njcm9sbFdpdGh9cHhgXHJcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbG9jaycpO1xyXG4gICAgYm9keUxvY2tTdGF0dXMgPSBmYWxzZTtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBib2R5TG9ja1N0YXR1cyA9IHRydWU7XHJcbiAgICB9LCBkZWxheSk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gc21vb3RoIGJlaGF2aW9yID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5leHBvcnQgY29uc3QgX3NsaWRlVXAgPSAodGFyZ2V0LCBkdXJhdGlvbiA9IDUwMCwgc2hvd21vcmUgPSAwKSA9PiB7XHJcbiAgaWYgKCF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdfc2xpZGUnKSkge1xyXG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ19zbGlkZScpO1xyXG4gICAgdGFyZ2V0LnN0eWxlLnRyYW5zaXRpb25Qcm9wZXJ0eSA9ICdoZWlnaHQsIG1hcmdpbiwgcGFkZGluZyc7XHJcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb24gKyAnbXMnO1xyXG4gICAgdGFyZ2V0LnN0eWxlLmhlaWdodCA9IGAke3RhcmdldC5vZmZzZXRIZWlnaHR9cHhgO1xyXG4gICAgdGFyZ2V0Lm9mZnNldEhlaWdodDtcclxuICAgIHRhcmdldC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgdGFyZ2V0LnN0eWxlLmhlaWdodCA9IHNob3dtb3JlID8gYCR7c2hvd21vcmV9cHhgIDogYDBweGA7XHJcbiAgICB0YXJnZXQuc3R5bGUucGFkZGluZ1RvcCA9IDA7XHJcbiAgICB0YXJnZXQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IDA7XHJcbiAgICB0YXJnZXQuc3R5bGUubWFyZ2luVG9wID0gMDtcclxuICAgIHRhcmdldC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAwO1xyXG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0YXJnZXQuaGlkZGVuID0gIXNob3dtb3JlID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAhc2hvd21vcmUgPyB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2hlaWdodCcpIDogbnVsbDtcclxuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLXRvcCcpO1xyXG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3BhZGRpbmctYm90dG9tJyk7XHJcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbWFyZ2luLXRvcCcpO1xyXG4gICAgICB0YXJnZXQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ21hcmdpbi1ib3R0b20nKTtcclxuICAgICAgIXNob3dtb3JlID8gdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdvdmVyZmxvdycpIDogbnVsbDtcclxuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7XHJcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndHJhbnNpdGlvbi1wcm9wZXJ0eScpO1xyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnX3NsaWRlJyk7XHJcbiAgICAgIC8vIGNyZWF0ZSBldmVudFxyXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgIG5ldyBDdXN0b21FdmVudCgnc2xpZGVVcERvbmUnLCB7XHJcbiAgICAgICAgICBkZXRhaWw6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfSwgZHVyYXRpb24pO1xyXG4gIH1cclxufTtcclxuZXhwb3J0IGNvbnN0IF9zbGlkZURvd24gPSAodGFyZ2V0LCBkdXJhdGlvbiA9IDUwMCwgc2hvd21vcmUgPSAwKSA9PiB7XHJcbiAgaWYgKCF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdfc2xpZGUnKSkge1xyXG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ19zbGlkZScpO1xyXG4gICAgdGFyZ2V0LmhpZGRlbiA9IHRhcmdldC5oaWRkZW4gPyBmYWxzZSA6IG51bGw7XHJcbiAgICBzaG93bW9yZSA/IHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0JykgOiBudWxsO1xyXG4gICAgbGV0IGhlaWdodCA9IHRhcmdldC5vZmZzZXRIZWlnaHQ7XHJcbiAgICB0YXJnZXQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgIHRhcmdldC5zdHlsZS5oZWlnaHQgPSBzaG93bW9yZSA/IGAke3Nob3dtb3JlfXB4YCA6IGAwcHhgO1xyXG4gICAgdGFyZ2V0LnN0eWxlLnBhZGRpbmdUb3AgPSAwO1xyXG4gICAgdGFyZ2V0LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAwO1xyXG4gICAgdGFyZ2V0LnN0eWxlLm1hcmdpblRvcCA9IDA7XHJcbiAgICB0YXJnZXQuc3R5bGUubWFyZ2luQm90dG9tID0gMDtcclxuICAgIHRhcmdldC5vZmZzZXRIZWlnaHQ7XHJcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5ID0gJ2hlaWdodCwgbWFyZ2luLCBwYWRkaW5nJztcclxuICAgIHRhcmdldC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbiArICdtcyc7XHJcbiAgICB0YXJnZXQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcclxuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy10b3AnKTtcclxuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgncGFkZGluZy1ib3R0b20nKTtcclxuICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnbWFyZ2luLXRvcCcpO1xyXG4gICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXJnaW4tYm90dG9tJyk7XHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnaGVpZ2h0Jyk7XHJcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnb3ZlcmZsb3cnKTtcclxuICAgICAgdGFyZ2V0LnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7XHJcbiAgICAgIHRhcmdldC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndHJhbnNpdGlvbi1wcm9wZXJ0eScpO1xyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnX3NsaWRlJyk7XHJcbiAgICAgIC8vIGNyZWF0ZSBldmVudFxyXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICAgIG5ldyBDdXN0b21FdmVudCgnc2xpZGVEb3duRG9uZScsIHtcclxuICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICk7XHJcbiAgICB9LCBkdXJhdGlvbik7XHJcbiAgfVxyXG59O1xyXG5leHBvcnQgY29uc3QgX3NsaWRlVG9nZ2xlID0gKHRhcmdldCwgZHVyYXRpb24gPSA1MDApID0+IHtcclxuICBpZiAodGFyZ2V0LmhpZGRlbikge1xyXG4gICAgcmV0dXJuIF9zbGlkZURvd24odGFyZ2V0LCBkdXJhdGlvbik7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBfc2xpZGVVcCh0YXJnZXQsIGR1cmF0aW9uKTtcclxuICB9XHJcbn07XHJcbiIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtIHtcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGZvcm1Eb21FbCBcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1Ym1pdEZvbyBcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihmb3JtRG9tRWwsIHN1Ym1pdEZvbykge1xyXG4gICAgICAgIHRoaXMuX2Zvcm0gPSBmb3JtRG9tRWxcclxuICAgICAgICB0aGlzLl9mb3JtLnNldEF0dHJpYnV0ZSgnbm92YWxpZGF0ZScsIHRydWUpXHJcbiAgICAgICAgdGhpcy5faW5wdXRDb250YWluZXJTZWxlY3RvciA9ICdmb3JtLWlucHV0J1xyXG4gICAgICAgIHRoaXMuX2lucHV0RXJyb3JNc2dTZWxlY3RvciA9ICdpbnB1dC10ZXh0LWVycm9yLW1zZydcclxuICAgICAgICB0aGlzLl9pbnB1dEVycm9yU2VsZWN0b3IgPSAnX2Vycm9yJ1xyXG4gICAgICAgIHRoaXMuX2lucHV0UGxhY2Vob2xkZXJTZWxlY3RvciA9ICdpbnB1dC10ZXh0LXBsYWNlaG9sZGVyJ1xyXG4gICAgICAgIHRoaXMuc3VibWl0Rm9ybSA9IHN1Ym1pdEZvb1xyXG4gICAgICAgIHRoaXMuX2lucHV0cyA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsIHRleHRhcmVhJylcclxuICAgICAgICB0aGlzLl9pbnB1dHNEYXRhID0gdGhpcy5fY3JlYXRlSW5wdXREYXRhKHRoaXMuX2lucHV0cylcclxuICAgICAgICB0aGlzLl9wYXNzd29yZElucHV0ID0gQXJyYXkuZnJvbSh0aGlzLl9pbnB1dHMpLmZpbmQoZSA9PiBlLm5hbWUgPT0gJ3Bhc3N3b3JkJylcclxuICAgICAgICB0aGlzLl9wYXNzd29yZFJlcGVhdElucHV0ID0gQXJyYXkuZnJvbSh0aGlzLl9pbnB1dHMpLmZpbmQoZSA9PiBlLm5hbWUgPT0gJ3Bhc3N3b3JkUmVwZWF0JylcclxuICAgICAgICB0aGlzLl9zdWJtaXRCdG4gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvblt0eXBlPVwic3VibWl0XCJdJylcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBfaW5wdXRzRGF0YToge1trZXk6IGlucHV0Lm5hbWVdIDp7XHJcbiAgICAgICAgICogICAgICAgICAgICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgaXNWYWxpZDogYm9vbCxcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGJvb2xcclxuICAgICAgICAgKiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgKiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAqICAqL1xyXG5cclxuICAgICAgICAvKiAgdGhpcy5fYnRuU3VibWl0ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKCdidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpXHJcbiAgICAgICAgICAgIHRoaXMuX2J0blN1Ym1pdC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSkgKi9cclxuXHJcblxyXG4gICAgICAgIHRoaXMuaW5pdEZvcm0oKVxyXG4gICAgfVxyXG4gICAgX2lucHV0SGFuZGxlcihpbnB1dFRhcmdldCkge1xyXG5cclxuXHJcblxyXG4gICAgICAgIHRoaXMuX2lucHV0c0RhdGFbaW5wdXRUYXJnZXQubmFtZV0udmFsdWUgPSBpbnB1dFRhcmdldC52YWx1ZVxyXG4gICAgICAgIHRoaXMuX3ZhbGlkYXRpb24oaW5wdXRUYXJnZXQpO1xyXG5cclxuICAgICAgICBpZiAoIWlucHV0VGFyZ2V0LnBsYWNlaG9sZGVyKSByZXR1cm5cclxuXHJcbiAgICAgICAgaWYgKGlucHV0VGFyZ2V0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlucHV0VGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5faW5wdXRDb250YWluZXJTZWxlY3RvcilcclxuICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuJyArIHRoaXMuX2lucHV0UGxhY2Vob2xkZXJTZWxlY3Rvcikuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlucHV0VGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5faW5wdXRDb250YWluZXJTZWxlY3RvcilcclxuICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuJyArIHRoaXMuX2lucHV0UGxhY2Vob2xkZXJTZWxlY3Rvcikuc3R5bGUuZGlzcGxheSA9ICdibG9jaydcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgX3ZhbGlkYXRpb24oaW5wdXQpIHtcclxuICAgICAgICAvL9Cy0LDQu9C40LTQsNGG0LjRjyDQuNC90L/Rg9GC0L7QslxyXG5cclxuICAgICAgICBzd2l0Y2ggKGlucHV0Lm5hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSAnbmFtZSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWQoaW5wdXQsIC9eW0EtWmEtetCQLdCv0LAt0Y/QgdGRIF0rJC8sICfQlNC+0L/Rg9GB0YLQuNC8INCy0LLQvtC0INGC0L7Qu9GM0LrQviDQsdGD0LrQsicpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZChpbnB1dCwgL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfC4oXCIuK1wiKSlAKChcXFtbMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFxdKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkLywgJ9Cf0L7Qu9C1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQsiDRhNC+0YDQvNCw0YLQtSBlbWFpbEBkb21haW4uY29tJylcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAncGhvbmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkKGlucHV0LCAvXlxcKyg3fDM3NSkgXFwoXFxkezN9XFwpIFxcZHszfS1cXGR7Mn0tXFxkezJ9JC8sICfQpNC+0YDQvNCw0YIg0L3QvtC80LXRgNCwINGC0LXQu9C10YTQvtC90LAgKzcgKDg4OCkgODg4LTg4LTg4JylcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdwYXNzd29yZCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWQoaW5wdXQsIC9eKD89LipbQS1aXSkoPz0uKlthLXpdKSg/PS4qXFxkKVtBLVphLXpcXGRdezgsfSQvLCAn0J3QtSDQutC+0YDRgNC10LrRgtC90YvQuSDQv9Cw0YDQvtC70YwnKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZChpbnB1dClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrSW5wdXRWYWxpZCh0YXJnZXQsIHJlZ2V4ID0gbnVsbCwgcmVnZXhNc2cgPSAn0YfQtSDRgtC+INC90LUg0YLQsNC6INC90LDQv9C40YHQsNC7LCDQuNGB0L/RgNCw0LLQu9GP0LknKSB7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0uaXNSZXF1aXJlZCkgcmV0dXJuXHJcblxyXG5cclxuICAgICAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IHRhcmdldC5jbG9zZXN0KCcuJyArIHRoaXMuX2lucHV0Q29udGFpbmVyU2VsZWN0b3IpO1xyXG4gICAgICAgIGNvbnN0IGVycm9yTXNnID0gaW5wdXRDb250YWluZXIucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLl9pbnB1dEVycm9yTXNnU2VsZWN0b3IpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0uaXNSZXF1aXJlZCAmJiAhdGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0udmFsdWUpIHtcclxuICAgICAgICAgICAgLy9jaGVjayByZXF1cmVkXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXF1aXJlZCcpO1xyXG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gJ9Ct0YLQviDQv9C+0LvQtSDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+LidcclxuICAgICAgICAgICAgdGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0uaXNWYWxpZCA9IGZhbHNlXHJcblxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5uYW1lID09ICdwYXNzd29yZFJlcGVhdCcpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRpb24odGhpcy5fcGFzc3dvcmRJbnB1dClcclxuICAgICAgICAgICAgaWYgKHRhcmdldC52YWx1ZSAhPT0gdGhpcy5faW5wdXRzRGF0YS5wYXNzd29yZC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRDb250YWluZXIuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yU2VsZWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSAn0J/QsNGA0L7Qu9C4INC90LUg0YHQvtCy0L/QsNC00LDRjtGCJ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0uaXNWYWxpZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnB1dHNEYXRhW3RhcmdldC5uYW1lXS5pc1ZhbGlkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgaW5wdXRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yU2VsZWN0b3IpXHJcbiAgICAgICAgICAgICAgICBlcnJvck1zZy50ZXh0Q29udGVudCA9ICcgJ1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PSAnY2hlY2tib3gnIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSA9PSAncmFkaW8nKSB7XHJcbiAgICAgICAgICAgIC8vY2hlY2sgZm9yIGNoZWNrYm94IGFuZCByYWRpb1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY2hlY2tib3ggYW5kIHJhZGlvJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lucHV0c0RhdGFbdGFyZ2V0Lm5hbWVdLmlzVmFsaWQgPSAhdGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0uaXNSZXF1aXJlZCA/IHRydWUgOiB0YXJnZXQuY2hlY2tlZFxyXG4gICAgICAgICAgICBpZiAoIXRhcmdldC5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QodGFyZ2V0LnZhbHVlKSkge1xyXG4gICAgICAgICAgICAvL2NoZWNrIHJlZ2V4XHJcbiAgICAgICAgICAgIGlucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvclNlbGVjdG9yKTtcclxuICAgICAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSByZWdleE1zZ1xyXG4gICAgICAgICAgICB0aGlzLl9pbnB1dHNEYXRhW3RhcmdldC5uYW1lXS5pc1ZhbGlkID0gZmFsc2VcclxuXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vdmFsaWRhdGlvbiBzdWNjZXNzZnVsbFxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3VjY2Vzc2Z1bGwnKTtcclxuICAgICAgICAgICAgdGhpcy5faW5wdXRzRGF0YVt0YXJnZXQubmFtZV0uaXNWYWxpZCA9IHRydWVcclxuICAgICAgICAgICAgaW5wdXRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yU2VsZWN0b3IpXHJcbiAgICAgICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gJyAnXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgX29uU3VibWl0KGV2dCkge1xyXG4gICAgICAgIGxldCB3aGF0c1VwID0gdHJ1ZVxyXG4gICAgICAgIGZvciAoY29uc3QgaW5wIG9mIHRoaXMuX2lucHV0cykge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnB1dEhhbmRsZXIoaW5wKVxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lucHV0c0RhdGFbaW5wLm5hbWVdLmlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHdoYXRzVXAgPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXdoYXRzVXApIHJldHVyblxyXG4gICAgICAgIC8v0YHQsNCx0LzQuNGCXHJcbiAgICAgICAgdGhpcy5fZm9ybS5zdWJtaXQoKVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgX2NyZWF0ZUlucHV0RGF0YShpbnB1dHMpIHtcclxuXHJcbiAgICAgICAgbGV0IGVjaG8gPSB7fVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGlucHV0IG9mIGlucHV0cykge1xyXG5cclxuICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnb2ZmJylcclxuICAgICAgICAgICAgaWYgKGlucHV0LnBsYWNlaG9sZGVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxjYWhvbGRlciA9IGlucHV0LmNsb3Nlc3QoJy4nICsgdGhpcy5faW5wdXRDb250YWluZXJTZWxlY3RvcilcclxuICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLl9pbnB1dFBsYWNlaG9sZGVyU2VsZWN0b3IpXHJcblxyXG4gICAgICAgICAgICAgICAgcGxjYWhvbGRlci50ZXh0Q29udGVudCA9IGlucHV0LnBsYWNlaG9sZGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YXNldC5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsY2Fob2xkZXIuc2V0QXR0cmlidXRlKCdkYXRhLWVuZCcsICcgKicpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0Lm5hbWUgPT0gJ3Bhc3N3b3JkJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFzc2J0biA9IGlucHV0LmNsb3Nlc3QoJy4nICsgdGhpcy5faW5wdXRDb250YWluZXJTZWxlY3RvcilcclxuICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcignLmlucHV0LXRleHQtcGFzc3dvcmQnKVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXNzYnRuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc2J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXNzb3dySGlkZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT0gJ2ZpbGUnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsgdGhpcy5fZmlsZUhhbmRsZXIoZSkgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGlmICghZWNob1tpbnB1dC5uYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IGlucHV0LmRhdGFzZXQucmVxdWlyZWQgPyBmYWxzZSA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZCA9IGlucHV0LmRhdGFzZXQucmVxdWlyZWQgPyB0cnVlIDogZmFsc2VcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBpbnB1dC5kYXRhc2V0LmRlZmF1bHR2IHx8IGlucHV0LmNoZWNrZWQgfHwgaW5wdXQudmFsdWUgfHwgJydcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PSAnY2hlY2tib3gnIHx8IGlucHV0LnR5cGUgPT0gJ3JhZGlvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaW5wdXQuY2hlY2tlZFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGVjaG9baW5wdXQubmFtZV1cclxuICAgICAgICAgICAgICAgIGVjaG9baW5wdXQubmFtZV0gPSB7IHZhbHVlLCBpc1ZhbGlkLCBpc1JlcXVpcmVkIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHJldHVybiBlY2hvXHJcblxyXG4gICAgfVxyXG5cclxuICAgIF9maWxlSGFuZGxlcihldnQpIHtcclxuICAgICAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGV2dC50YXJnZXQuY2xvc2VzdCgnLicgKyB0aGlzLl9pbnB1dENvbnRhaW5lclNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoZXZ0LnRhcmdldC52YWx1ZSkge1xyXG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdfYWN0aXZlJylcclxuICAgICAgICAgICAgaW5wdXRDb250YWluZXIucXVlcnlTZWxlY3RvcignLmlucHV0LWZpbGUtZ290JylcclxuICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZS10ZXh0JylcclxuICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudCA9IGV2dC50YXJnZXQudmFsdWUuc3BsaXQoJ1xcXFwnKS5zbGljZSgtMSlcclxuXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ19hY3RpdmUnKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfcGFzc293ckhpZGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Bhc3N3b3JkSW5wdXQudHlwZSA9PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmRJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAncGFzc3dvcmQnKVxyXG4gICAgICAgICAgICB0aGlzLl9wYXNzd29yZFJlcGVhdElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdwYXNzd29yZCcpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmRJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dCcpXHJcbiAgICAgICAgICAgIHRoaXMuX3Bhc3N3b3JkUmVwZWF0SW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQnKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgaW5pdEZvcm0oKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybS5ub1ZhbGlkYXRlID0gdHJ1ZVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5faW5wdXRzLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB0aGlzLl9pbnB1dEhhbmRsZXIoZS50YXJnZXQpKVxyXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKGUpID0+IHRoaXMuX2lucHV0SGFuZGxlcihlLnRhcmdldCkpXHJcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB0aGlzLl9pbnB1dEhhbmRsZXIoZS50YXJnZXQpKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuX3N1Ym1pdEJ0bikge1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRCdG4uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpXHJcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7IHRoaXMuX29uU3VibWl0KGUpIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xyXG5pbXBvcnQgRm9ybSBmcm9tIFwiLi9Gb3JtXCI7XHJcbmltcG9ydCBJbnB1dG1hc2sgZnJvbSBcImlucHV0bWFza1wiO1xyXG5cclxuY29uc3QgcnUgPSBuZXcgSW5wdXRtYXNrKCcrNyAoOTk5KSA5OTktOTktOTknLCB7IHBsYWNlaG9sZGVyOiAnJyB9KSxcclxuICAgIGJyID0gbmV3IElucHV0bWFzaygnKzM3NSAoOTk5KSA5OTktOTktOTknLCB7IHBsYWNlaG9sZGVyOiAnJyB9KSxcclxuICAgIGt6ID0gbmV3IElucHV0bWFzaygnKzcgKDk5OSkgOTk5LTk5LTk5JywgeyBwbGFjZWhvbGRlcjogJycgfSksXHJcbiAgICBwaG9uZU1hcCA9IHtcclxuICAgICAgICBydSwgYnIsIGt6XHJcbiAgICB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0Rm9ybXMoKSB7XHJcbiAgICBjb25zdCBmb3JtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb3JtJylcclxuICAgIGlmIChmb3Jtcykge1xyXG4gICAgICAgIGZvcm1zLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgbmV3IEZvcm0oZSwgZm9ybVN1Ym1pdClcclxuICAgICAgICAgICAgcnUubWFzaygkKGUpLmZpbmQoJ2lucHV0W25hbWU9XCJwaG9uZVwiXScpKTtcclxuICAgICAgICAgICAgY2hhbmdlSW5wdXRNYXNrKGUpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZm9ybVN1Ym1pdChpbnB1dERhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKGlucHV0RGF0YSk7XHJcbn1cclxuZnVuY3Rpb24gY2hhbmdlSW5wdXRNYXNrKGZvcm0pIHtcclxuXHJcbiAgICAkKGZvcm0pLmZpbmQoJy5pbnB1dC1waG9uZV9fc2VsZWN0LWxpc3QtYnRuJykub24oJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICBjb25zdCB7IG1hc2sgfSA9IGUudGFyZ2V0LmRhdGFzZXQsXHJcbiAgICAgICAgICAgIHBhcmVudCA9ICQoZS50YXJnZXQuY2xvc2VzdCgnLmlucHV0LXBob25lJykpLFxyXG4gICAgICAgICAgICBpbWFnZUxpbmsgPSBlLnRhcmdldC5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoJ3NyYycpXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICogMS4g0LzQtdC90LDQtdGCINC40LfQvtCx0YDQsNC20LXQvdC40LUgXHJcbiAgICAgICAgICAgICogMi4g0L/RgNC40LzQtdC90Y/QtdGCINC80LDRgdC60YMg0LjQtyDRhdGN0YjQsFxyXG4gICAgICAgICAgICAqIDMuINC30LDQutGA0YvQstCw0LXRgtGB0Y9cclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAkKCcuaW5wdXQtcGhvbmVfX3NlbGVjdC1jdXJyZW50LWZsYWcnKS5hdHRyKCdzcmMnLCBpbWFnZUxpbmspXHJcbiAgICAgICAgcGhvbmVNYXBbbWFza10ubWFzayhwYXJlbnQuZmluZCgnaW5wdXRbbmFtZT1cInBob25lXCJdJykpXHJcbiAgICAgICAgcGFyZW50LmZpbmQoJy5kcm9wLWRvd24tdGFyZ2V0JykudHJpZ2dlcignY2xpY2snKVxyXG4gICAgfSlcclxuXHJcbn0iLCJjb25zdCBpbnB1dENoYW5nZSA9IG5ldyBFdmVudCgnaW5wdXQnKVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdFNlbGVjdCgpIHtcclxuICAgIC8qKlxyXG4gICAgICog0LrQsNGB0YLQvtC80L3Ri9C5INGB0LXQu9C10LrRgiDRhdGA0LDQvdGP0YnQuNC5INC30L3QsNGH0LXQvdC40LUg0LIg0LjQvdC/0YPRgtC1XHJcbiAgICAgKiAxLiDQv9GA0LjRgdCy0LDQuNCy0LDQvdC40LUg0L3QvtCy0L7Qs9C+INC30L3QsNGH0LXQvdC40Y8g0LjQvdC/0YPRgtGDINC90LAg0L/RgNGP0LzRg9GOXHJcbiAgICAgKiAo0LfQvdCw0YfQtdC90LjQtSDQtNC70Y8g0LjQvdC/0YPRgtCwINCx0LXRgNC10YLRgdGPINC40LcgZGF0YS12YWx1ZSDQuNC70LggdGV4dENvbnRlbnQg0LrQvdC+0L/QutC4KVxyXG4gICAgICogXHJcbiAgICAgKiAyLiDRgtGA0LjQs9C10YAgaW5wdXQg0LjQstC10L3RgtCwINC90LAg0LjQvdC/0YPRgtC1INC00LvRjyDRgtGA0LjQs9C10YDQsCDQstCw0LvQuNC00LDRhtC40Lgg0YTQvtGA0LzRiyDQuCDQt9Cw0L/QuNGB0Lgg0L3QvtCy0LPQviDQt9C90LDRh9C10L3QuNGPXHJcbiAgICAgKiBcclxuICAgICAqIDMtNC4g0L/QtdGA0LXQutC70Y7Rh9C10L3QuNC1INC00LjQt9C10LnQsdC70LAg0YMg0LrQvdC+0L/QvtC6XHJcbiAgICAgKiBcclxuICAgICAqIDUuINGC0YDQuNCz0LXRgCDQtNGA0L7Qv9C00LDRg9C90LAg0LTQu9GPINC30LDQutGA0YvRgtC40Y9cclxuICAgICAqL1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VsZWN0JylcclxuICAgIGlmICghc2VsZWN0cykgcmV0dXJuXHJcblxyXG4gICAgc2VsZWN0cy5mb3JFYWNoKChzZWxlY3QpID0+IHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxlY3RfX2l0ZW1zLWxpc3QtZScpXHJcblxyXG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIG9wdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXQgPSBzZWxlY3QucXVlcnlTZWxlY3RvcignLnNlbGVjdF9fdGFyZ2V0LWlucHV0JylcclxuXHJcbiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGV2LnRhcmdldC5kYXRhc2V0LnZhbHVlIHx8IGV2LnRhcmdldC50ZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgICAgaW5wdXQuZGlzcGF0Y2hFdmVudChpbnB1dENoYW5nZSlcclxuXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZvckVhY2goKGJ0bikgPT4gYnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKSlcclxuICAgICAgICAgICAgICAgIGV2LnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJy5kcm9wLWRvd24tdGFyZ2V0JykuY2xpY2soKVxyXG5cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgIH0pXHJcblxyXG5cclxuXHJcbn0iLCJleHBvcnQgY2xhc3MgU3dpdGNoZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nIHwgRWxlbWVudCB9IGNvbnRhaW5lciBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbml0c3RhdGUgXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgaW5pdHN0YXRlID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IHR5cGVvZiBjb250YWluZXIgPT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcikgOiBjb250YWluZXJcclxuICAgICAgICB0aGlzLl9pbml0U3RhdGUgPSBpbml0c3RhdGVcclxuICAgICAgICB0aGlzLl9idG5TZWxlY3RvciA9ICcuc3dpdGNoZXItYnRuJ1xyXG4gICAgICAgIHRoaXMuX3NsaWRlU2VsZWN0b3IgPSAnLnN3aXRjaGVyLXNsaWRlJ1xyXG4gICAgICAgIHRoaXMuX2RhdGFzZXRCdG4gPSAnc3dpdGNodG8nXHJcbiAgICAgICAgdGhpcy5fZGF0YXNldFNsaWRlID0gJ3N3aXRjaHNsaWRlJ1xyXG4gICAgICAgIHRoaXMuX2J0bnMgPSB0aGlzLl9pbml0QnRucyh0aGlzLl9jb250YWluZXIpXHJcbiAgICAgICAgdGhpcy5fc2xpZGVzID0gdGhpcy5faW5pdFNsaWRlcyh0aGlzLl9jb250YWluZXIpXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBfaW5pdEJ0bnMoY29udGFpbmVyKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9idG5TZWxlY3RvcilcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgbGlzdC5mb3JFYWNoKChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKCdkYXRhLScgKyB0aGlzLl9kYXRhc2V0QnRuLCBpKVxyXG4gICAgICAgICAgICBpZiAoZS50YWdOYW1lID09ICdJTlBVVCcpIHtcclxuICAgICAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N3aXRjaGVyKGV2KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zd2l0Y2hlcihldilcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbml0U3RhdGUgIT09IG51bGwgJiYgaSA9PT0gdGhpcy5faW5pdFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBlLmNsYXNzTGlzdC5hZGQoJ19vcGVuZWQnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGxpc3RcclxuICAgIH1cclxuXHJcblxyXG4gICAgX2luaXRTbGlkZXMoY29udGFpbmVyKSB7XHJcbiAgICAgICAgY29uc3QgbGlzdCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NsaWRlU2VsZWN0b3IpXHJcbiBcclxuICAgICAgICBsaXN0LmZvckVhY2goKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIHRoaXMuX2RhdGFzZXRTbGlkZSwgaSlcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbml0U3RhdGUgIT09IG51bGwgJiYgaSAhPT0gdGhpcy5faW5pdFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIFxyXG5cclxuICAgICAgICByZXR1cm4gbGlzdFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBfc3dpdGNoZXIoZSkge1xyXG5cclxuICAgICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnX29wZW5lZCcpKSByZXR1cm5cclxuXHJcbiAgICAgICAgZSA9IGUuY3VycmVudFRhcmdldFxyXG5cclxuICAgICAgICB0aGlzLl9zbGlkZXMuZm9yRWFjaCgoc2xpZGUpID0+IHtcclxuICAgICAgXHJcbiAgICAgICAgICAgIGlmIChzbGlkZS5kYXRhc2V0W3RoaXMuX2RhdGFzZXRTbGlkZV0gPT0gZS5kYXRhc2V0W3RoaXMuX2RhdGFzZXRCdG5dKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuX2J0bnMuZm9yRWFjaCgoYnRuKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoYnRuLmRhdGFzZXRbdGhpcy5fZGF0YXNldEJ0bl0gPT0gZS5kYXRhc2V0W3RoaXMuX2RhdGFzZXRCdG5dKSB7XHJcbiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZCgnX29wZW5lZCcpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnRuLmNsYXNzTGlzdC5jb250YWlucygnX29wZW5lZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZSgnX29wZW5lZCcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgIH1cclxuXHJcblxyXG59IiwiaW1wb3J0ICQgZnJvbSBcImpxdWVyeVwiO1xyXG5pbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcic7XHJcbmltcG9ydCB7IE5hdmlnYXRpb24sIFBhZ2luYXRpb24sIEdyaWQsIEF1dG9wbGF5IH0gZnJvbSAnc3dpcGVyL21vZHVsZXMnO1xyXG5pbXBvcnQgeyByZW0gfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XHJcbmltcG9ydCBpbml0Rm9ybXMgZnJvbSBcIi4uL3V0aWxzL2Zvcm1zXCI7XHJcbmltcG9ydCBpbml0U2VsZWN0IGZyb20gXCIuLi91dGlscy9zZWxlY3RcIjtcclxuaW1wb3J0IGluaXRDYXRhbG9nRmlsdGVyT3BlbmVyIGZyb20gJy4uL2NvbXBvbmVudHMvY2F0YWxvZydcclxuaW1wb3J0IGluaXRDYXJkUGFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9jYXJkVmlld1wiO1xyXG5pbXBvcnQgaW5pdEZlZWRCYWNrIGZyb20gXCIuLi9jb21wb25lbnRzL2ZlZWRiYWNrXCI7XHJcbmltcG9ydCBpbml0U2lnblVwIGZyb20gXCIuLi9jb21wb25lbnRzL3NpZ25VcFwiO1xyXG5pbXBvcnQgaW5pdFNlbGVjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9zZWxlY3Rpb25cIjtcclxuXHJcbmltcG9ydCB7IFN3aXRjaGVyIH0gZnJvbSBcIi4uL3V0aWxzL1N3aXRjaGVyXCI7XHJcblxyXG4vKiAgKi9cclxuXHJcblxyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICBkcm9wRG93bnMoKVxyXG4gICAgaW5pdEZvcm1zKClcclxuICAgIGluaXRTd2lwZXJzKClcclxuXHJcbiAgICBpbml0U2VsZWN0KClcclxuICAgIGluaXRNb2JpbGVOYXYoKVxyXG4gICAgaW5pdENhdGFsb2dGaWx0ZXJPcGVuZXIoKVxyXG4gICAgaW5pdENhcmRQYWdlKClcclxuICAgIGluaXRGZWVkQmFjaygpXHJcbiAgICBpbml0U2lnblVwKClcclxuICAgIG1vZGFsc0hhbmRsZXIoKVxyXG5cclxuICAgIGluaXRTd2ljaGVycygpXHJcbiAgICBpbml0U2VsZWN0aW9uKClcclxuICAgIG1vZGFsTW9iaWxlQ29kZSgpXHJcbiAgICBpbml0U2hvd0hlbHAoKVxyXG5cclxufSk7XHJcblxyXG5mdW5jdGlvbiBkcm9wRG93bnMoKSB7XHJcblxyXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBpZihlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2Ryb3AtZG93bi10YXJnZXQnKSkge1xyXG4gICAgICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdfb3BlbmVkJylcclxuICAgICAgICAgICAgZS50YXJnZXQuY2xvc2VzdCgnLmRyb3AtZG93bi1jb250YWluZXInKVxyXG4gICAgICAgICAgICAgICAgLmNsYXNzTGlzdC50b2dnbGUoJ19vcGVuZWQnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgXHJcbiAgICB9KVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFN3aXBlcnMoKSB7XHJcblxyXG4gICAgY29uc3QgY29tcGxlY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNvbXBsZWN0c19fYy1zbGlkZXInKVxyXG4gICAgaWYgKGNvbXBsZWN0cykge1xyXG4gICAgICAgIGNvbXBsZWN0cy5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBTd2lwZXIoZSwge1xyXG4gICAgICAgICAgICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxyXG4gICAgICAgICAgICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IHJlbSgzKSxcclxuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgNzY4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsOiBlLnF1ZXJ5U2VsZWN0b3IoJy5jb21wbGVjdHNfX2Mtc2xpZGVyLXBhZ2luYXRpb24nKVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2RWw6IGUucXVlcnlTZWxlY3RvcignLmNvbXBsZWN0c19fYy1zbGlkZXItcHJldicpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRFbDogZS5xdWVyeVNlbGVjdG9yKCcuY29tcGxlY3RzX19jLXNsaWRlci1uZXh0JylcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgd2h5Q2hvaWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndoeS1jaG9pY2VfX2Mtc2xpZGVyJylcclxuICAgIGlmICh3aHlDaG9pY2UpIHtcclxuICAgICAgICBuZXcgU3dpcGVyKHdoeUNob2ljZSwge1xyXG4gICAgICAgICAgICBtb2R1bGVzOiBbUGFnaW5hdGlvbiwgR3JpZF0sXHJcbiAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMyksXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIHJvd3M6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgIDc2ODoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiAncm93J1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZWw6ICcud2h5LWNob2ljZV9fYy1zbGlkZXItcGFnaW5hdGlvbidcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjYXRlZ29yaWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmN0YWdvcmllc19fYy1zbGlkZXInKVxyXG4gICAgaWYgKGNhdGVnb3JpZXMpIHtcclxuICAgICAgICBuZXcgU3dpcGVyKGNhdGVnb3JpZXMsIHtcclxuICAgICAgICAgICAgbW9kdWxlczogW1BhZ2luYXRpb24sIEdyaWRdLFxyXG4gICAgICAgICAgICBsb29wOiBmYWxzZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogcmVtKDMpLFxyXG4gICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICByb3dzOiAxXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgNzY4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNCxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMixcclxuICAgICAgICAgICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6ICdyb3cnXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBlbDogJy5jdGFnb3JpZXNfX2Mtc2xpZGUtcGFnaW5hdGlvbidcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGNvbnN0IHNwY2VpYWxPZmZlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zcGVjaWFsLW9mZmVyX19jLXNsaWRlcicpXHJcbiAgICBpZiAoc3BjZWlhbE9mZmVyKSB7XHJcbiAgICAgICAgbmV3IFN3aXBlcihzcGNlaWFsT2ZmZXIsIHtcclxuICAgICAgICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxyXG4gICAgICAgICAgICBsb29wOiBmYWxzZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogcmVtKDMpLFxyXG4gICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgNzY4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogNSxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGVsOiAnLnNwZWNpYWwtb2ZmZXJfX2Mtc2xpZGVyLXBhZ2luYXRpb24nXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIHByZXZFbDogJy5zcGVjaWFsLW9mZmVyX19jLXNsaWRlci1wcmV2JyxcclxuICAgICAgICAgICAgICAgIG5leHRFbDogJy5zcGVjaWFsLW9mZmVyX19jLXNsaWRlci1uZXh0J1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgY29uc3QgaGVhZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWhlYWRpbmdfX2MtbWFpbi1zbGlkZXInKVxyXG4gICAgaWYgKGhlYWRpbmcpIHtcclxuICAgICAgICBuZXcgU3dpcGVyKGhlYWRpbmcsIHtcclxuICAgICAgICAgICAgbW9kdWxlczogW1BhZ2luYXRpb24sIEF1dG9wbGF5XSxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogcmVtKDMpLFxyXG4gICAgICAgICAgICBncmFiQ3Vyc29yOiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b3BsYXk6IHtcclxuICAgICAgICAgICAgICAgIGRlbGF5OiAzMDAwLFxyXG4gICAgICAgICAgICAgICAgcGF1c2VPbk1vdXNlRW50ZXI6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGVsOiAnLmhlYWRlci1wYWdpbmF0aW9uJyxcclxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIGNvbnN0IGRlZmVuc2VXb3JrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlZmVuc2Utd29ya19fYy1zbGlkZXInKVxyXG4gICAgaWYgKGRlZmVuc2VXb3JrKSB7XHJcbiAgICAgICAgbmV3IFN3aXBlcihkZWZlbnNlV29yaywge1xyXG4gICAgICAgICAgICBtb2R1bGVzOiBbUGFnaW5hdGlvbl0sXHJcbiAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMyksXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICA3Njg6IHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgZWw6ICcuZGVmZW5zZS13b3JrLXBhZ2luYXRpb24nXHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2F0YWxvZ0hlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0YWxvZy1oZWFkLXN3aXBlcicpXHJcbiAgICBpZiAoY2F0YWxvZ0hlYWQpIHtcclxuICAgICAgICBuZXcgU3dpcGVyKGNhdGFsb2dIZWFkLCB7XHJcbiAgICAgICAgICAgIG1vZHVsZXM6IFtQYWdpbmF0aW9uXSxcclxuICAgICAgICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IHJlbSgzKSxcclxuICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgIDc2ODoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBlbDogJy5jYXRhbG9nLWhlYWQtcGFnaW5hdGlvbidcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjYXRhbG9nRGVmZW5zZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXRhbG9nLWRlZmVuc2VfX2MtcmlnaHQnKVxyXG4gICAgaWYgKGNhdGFsb2dEZWZlbnNlKSB7XHJcbiAgICAgICAgbmV3IFN3aXBlcihjYXRhbG9nRGVmZW5zZSwge1xyXG4gICAgICAgICAgICBtb2R1bGVzOiBbUGFnaW5hdGlvbiwgR3JpZF0sXHJcbiAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMyksXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIHJvd3M6IDFcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICA3Njg6IHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93czogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogJ3JvdydcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGVsOiAnLmNhdGFsb2ctZGVmZW5zZS1wYWdpbmF0aW9uJ1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNhdGVnb3J5RnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2F0ZWdvcnktZnMtc2xpZGVyJylcclxuICAgIGlmIChjYXRlZ29yeUZzKSB7XHJcbiAgICAgICAgY2F0ZWdvcnlGcy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgICAgICBuZXcgU3dpcGVyKGVsLCB7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVzOiBbUGFnaW5hdGlvbl0sXHJcbiAgICAgICAgICAgICAgICBsb29wOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogcmVtKDMpLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICA3Njg6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWw6IGVsLmNsb3Nlc3QoJy5jYXRlZ29yeS1mcycpLnF1ZXJ5U2VsZWN0b3IoJy5jYXRlZ29yeS1mcy1wYWdpbmF0aW9uJylcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNob2ljZVN5c3RlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jaG9pY2Utc3lzdGVtX19jLWxlZnQtc2xpZGVyJylcclxuICAgIGlmIChjaG9pY2VTeXN0ZW0pIHtcclxuICAgICAgICBjb25zdCBzd2lwZXIgPSBuZXcgU3dpcGVyKGNob2ljZVN5c3RlbSwge1xyXG4gICAgICAgICAgICBtb2R1bGVzOiBbUGFnaW5hdGlvbl0sXHJcbiAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMyksXHJcbiAgICAgICAgICAgIGFsbG93VG91Y2hNb3ZlOiBmYWxzZSxcclxuICAgICAgICAgICAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IHRydWUsXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb246IHtcclxuICAgICAgICAgICAgICAgIGVsOiAnLmNob2ljZS1zeXN0ZW1fX2MtbGVmdC10b3AtcGFnaW5hdGlvbicsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZnJhY3Rpb24nXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY2hvaWNlU3lzdGVtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jaG9pY2Utc3lzdGVtX19jLWxlZnQtc2xpZGVyLWZvcm0tZS1uZXh0JylcclxuICAgICAgICAgICAgLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbmV3c0RlYXRhaWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmV3cy1kZXRhaWwtc2xpZGVyJylcclxuICAgIGlmIChuZXdzRGVhdGFpbCkge1xyXG4gICAgICAgIG5ld3NEZWF0YWlsLmZvckVhY2goKGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIG5ldyBTd2lwZXIoZS5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyJyksIHtcclxuICAgICAgICAgICAgICAgIG1vZHVsZXM6IFtOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uXSxcclxuICAgICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxyXG4gICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMyksXHJcbiAgICAgICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgIDc2ODoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZFbDogZS5xdWVyeVNlbGVjdG9yKCcuYnRuLXN3aXBlcl9sZWZ0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEVsOiBlLnF1ZXJ5U2VsZWN0b3IoJy5idG4tc3dpcGVyX3JpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsOiBlLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXItcGFnaW5hdGlvbicpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0TW9iaWxlTmF2KCkge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vYmlsZS1uYXYnKVxyXG4gICAgaWYgKCF0YXJnZXQpIHJldHVyblxyXG5cclxuICAgIGxldCBzY3JvbGxTdGFydCA9IDBcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcclxuICAgICAgICBpZiAod2luZG93LnNjcm9sbFkgPiBzY3JvbGxTdGFydCArIDUwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QuYWRkKCdfb3BlbmVkJylcclxuICAgICAgICAgICAgc2Nyb2xsU3RhcnQgPSB3aW5kb3cuc2Nyb2xsWVxyXG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93LnNjcm9sbFkgPCBzY3JvbGxTdGFydCAtIDUwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdfb3BlbmVkJylcclxuICAgICAgICAgICAgc2Nyb2xsU3RhcnQgPSB3aW5kb3cuc2Nyb2xsWVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbW9kYWxzSGFuZGxlcigpIHtcclxuXHJcblxyXG4gICAgY29uc3QgbW9kYWxPcGVuZXJzID0gJCgnLm1vZGFsLW9wZW5lcicpLFxyXG4gICAgICAgIG1vZGFsQ2xvc2VycyA9ICQoJy5tb2RhbC1jbG9zZXInKSxcclxuICAgICAgICBodG1sID0gJCgnaHRtbCcpXHJcblxyXG5cclxuICAgIGlmICghbW9kYWxPcGVuZXJzIHx8ICFtb2RhbENsb3NlcnMpIHJldHVyblxyXG5cclxuICAgIG1vZGFsT3BlbmVycy5vbignY2xpY2snLCAoZXYpID0+IHtcclxuICAgICAgICBjb25zdCB7IG1vZGFsIH0gPSBldi5jdXJyZW50VGFyZ2V0LmRhdGFzZXRcclxuXHJcbiAgICAgICAgJChgLm1vZGFsLSR7bW9kYWx9YClcclxuICAgICAgICAgICAgLmZhZGVJbigpXHJcbiAgICAgICAgICAgIC5hZGRDbGFzcygnX29wZW5lZCcpXHJcbiAgICAgICAgaHRtbC5hZGRDbGFzcygnbG9jaycpXHJcbiAgICB9KVxyXG5cclxuXHJcbiAgICBtb2RhbENsb3NlcnMub24oJ2NsaWNrJywgKGV2KSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBjbGFzc0xpc3QgfSA9IGV2LnRhcmdldFxyXG4gICAgICAgIGlmICghY2xhc3NMaXN0LmNvbnRhaW5zKCdtb2RhbC1jbG9zZXInKSkgcmV0dXJuXHJcblxyXG4gICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoJ21vZGFsJykpIHtcclxuICAgICAgICAgICAgJChldi50YXJnZXQpLmZhZGVPdXQoKS5yZW1vdmVDbGFzcygnX29wZW5lZCcpXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQoZXYudGFyZ2V0LmNsb3Nlc3QoJy5tb2RhbCcpKS5mYWRlT3V0KCkucmVtb3ZlQ2xhc3MoJ19vcGVuZWQnKVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgaHRtbC5yZW1vdmVDbGFzcygnbG9jaycpXHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBtb2RhbE1vYmlsZUNvZGUoKSB7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSAkKCcuaW5wdXQtNHgtY29kZScpXHJcbiAgICBpZiAoIWNvbnRhaW5lcikgcmV0dXJuXHJcblxyXG4gICAgY29uc3QgaW5wdXRzID0gY29udGFpbmVyLmZpbmQoJ2lucHV0W25hbWU9XCJjb2RlXCJdJyksXHJcbiAgICAgICAgZXJyTXNnID0gY29udGFpbmVyLmZpbmQoJy5pbnB1dC10ZXh0LWVycm9yLW1zZycpLFxyXG4gICAgICAgIHZhbHVlSW5wdXQgPSBjb250YWluZXIuZmluZCgnaW5wdXRbbmFtZT1cInBpbmNvZGVcIl0nKVxyXG5cclxuICAgIGNvbnRhaW5lci5vbignc3VibWl0JywgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgXHJcbiAgICB9KVxyXG5cclxuICAgIGlucHV0cy5vbigna2V5ZG93bicsIChlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gZS5rZXlcclxuICAgICAgICBpZiAodmFsID09IHZhbC5yZXBsYWNlKC9bMC05XS8sICcnKSkge1xyXG4gICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkudmFsKCcnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLnZhbCgnJyk7XHJcbiAgICAgICAgbGV0IHJlcyA9IEFycmF5LmZyb20odmFsdWVJbnB1dC52YWwoKSlcclxuICAgICAgICByZXNbZS50YXJnZXQuZGF0YXNldC5pbmRleF0gPSB2YWxcclxuICAgICAgICByZXMgPSByZXMuam9pbignJylcclxuICAgICAgICB2YWx1ZUlucHV0LnZhbChyZXMpXHJcblxyXG5cclxuXHJcbiAgICB9KVxyXG5cclxuICAgIGlucHV0cy5vbigna2V5dXAnLCAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBsZXQgdmFsID0gJCh0aGlzKS52YWwoKTtcclxuICAgICAgICAvLyDQktCy0L7QtCDRgtC+0LvRjNC60L4g0YbQuNGE0YBcclxuICAgICAgICBpZiAodmFsID09IHZhbC5yZXBsYWNlKC9bMC05XS8sICcnKSkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLnZhbCgnJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g0J/QtdGA0LXQtNCw0YfQsCDRhNC+0LrRg9GB0LAg0YHQu9C10LTRg9GO0YnQtdC80YMgaW5ucHV0XHJcbiAgICAgICAgaWYgKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4IDwgMykge1xyXG4gICAgICAgICAgICBpbnB1dHMuZXEoaW5wdXRzLmluZGV4KHRoaXMpICsgMSkuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICBcclxuICAgICAgICBpZih2YWx1ZUlucHV0LnZhbCgpID09IHZhbHVlSW5wdXQudmFsKCkucmVwbGFjZSgvXFwqL2csICcnKSl7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci50cmlnZ2VyKCdzdWJtaXQnKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSkpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRTd2ljaGVycygpIHtcclxuICAgIGNvbnN0IGJhc2tldERlbGl2ZXJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN3aXRjaGVyLWRlbGl2ZXJ5JylcclxuICAgIGlmIChiYXNrZXREZWxpdmVyeSkge1xyXG4gICAgICAgIG5ldyBTd2l0Y2hlcihiYXNrZXREZWxpdmVyeSwgMClcclxuICAgIH1cclxuICAgIGNvbnN0IHVzZXJkYXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN3aXRjaGVyLXVzZXJkYXRhJylcclxuXHJcbiAgICBpZiAodXNlcmRhdGEpIHtcclxuICAgICAgICBuZXcgU3dpdGNoZXIodXNlcmRhdGEsIDApXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbW9kYWxDZGVrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWNkZWsnKVxyXG4gICAgaWYgKG1vZGFsQ2Rlaykge1xyXG4gICAgICAgIG5ldyBTd2l0Y2hlcihtb2RhbENkZWssIDApXHJcbiAgICB9XHJcbiAgICBjb25zdCBzdXBwb3J0TGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdXBwb3J0LWxpc3QnKVxyXG4gICAgaWYgKHN1cHBvcnRMaXN0KSB7XHJcbiAgICAgICAgbmV3IFN3aXRjaGVyKHN1cHBvcnRMaXN0LCAwKVxyXG4gICAgfVxyXG4gICAgY29uc3QgdXNlclBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXNlci1wYWdlJylcclxuICAgIGlmICh1c2VyUGFnZSkge1xyXG4gICAgICAgIG5ldyBTd2l0Y2hlcih1c2VyUGFnZSwgMClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtb2RhbFNpZ24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtc2lnbi1yZXNldC1zd2l0Y2hlcicpXHJcbiAgICBpZiAobW9kYWxTaWduKSB7XHJcbiAgICAgICAgbmV3IFN3aXRjaGVyKG1vZGFsU2lnbiwgMClcclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFNob3dIZWxwKCkge1xyXG4gICAgY29uc3QgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaG93LWhlbHAnKVxyXG5cclxuICAgIHRhcmdldHMuZm9yRWFjaCgodCkgPT4ge1xyXG4gICAgICAgIGlmICghJCh0KS5maW5kKCcuc2hvdy1oZWxwLXRleHQnKSkgcmV0dXJuXHJcblxyXG4gICAgICAgIHQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcclxuICAgICAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmZpbmQoJy5zaG93LWhlbHAtdGV4dCcpLmZhZGVJbigpXHJcbiAgICAgICAgfSlcclxuICAgICAgICB0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuZmluZCgnLnNob3ctaGVscC10ZXh0JykuZmFkZU91dCgpXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCAkIGZyb20gXCJqcXVlcnlcIjtcclxuLy9pbXBvcnQgbm9VaVNsaWRlIGZyb20gJ25vdWlzbGlkZXInXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRDYXRhbG9nRmlsdGVyT3BlbmVyKCkge1xyXG5cclxuICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhdGFsb2ctY3VycmVudCcpKSByZXR1cm5cclxuICAgLy8gcHJpY2VTbGlkZXIoKVxyXG5cclxuXHJcbiAgICBjb25zdCBvcGVuZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0YWxvZy1jdXJyZW50X19pdGVtcy10b3Atb3BlbmVyJyksXHJcbiAgICAgICAgY2xvc2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhdGFsb2ctY3VycmVudF9fZmlsdGVyLWNsb3NlcicpLFxyXG4gICAgICAgIGh0bWwgPSAkKCdodG1sJyksXHJcbiAgICAgICAgdGFyZ2V0ID0gJCgnLmNhdGFsb2ctY3VycmVudF9fZmlsdGVyJylcclxuXHJcblxyXG4gICAgb3BlbmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG5cclxuICAgICAgICBodG1sLmFkZENsYXNzKCdsb2NrJylcclxuICAgICAgICB0YXJnZXQuZmFkZUluKClcclxuICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoJ19vcGVuZWQnKVxyXG4gICAgfSlcclxuICAgIGNsb3Nlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBodG1sLnJlbW92ZUNsYXNzKCdsb2NrJylcclxuICAgICAgICB0YXJnZXQuZmFkZU91dCgpXHJcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUNsYXNzKCdfb3BlbmVkJylcclxuICAgIH0pXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xyXG4gICAgICAgIGlmICghdGFyZ2V0Lmhhc0NsYXNzKCdfb3BlbmVkJykgJiYgaHRtbC5oYXNDbGFzcygnbG9jaycpKSB7XHJcbiAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2xhc3MoJ2xvY2snKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBwcmljZVNsaWRlcigpIHtcclxuXHJcbiAgICBjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0YWxvZy1jdXJyZW50X19maWx0ZXItc2Nyb2xsLWxpc3QtcHJpY2Utc2xpZGVyJyksXHJcbiAgICAgICAgbWluID0gJCgnI3ByaWNlSW5wdXRNaW4nKSxcclxuICAgICAgICBtYXggPSAkKCcjcHJpY2VJbnB1dE1heCcpXHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHJldHVyblxyXG5cclxuICAgIG1pbi5hdHRyKCdtaW4nLCAwKVxyXG4gICAgbWF4LmF0dHIoJ21heCcsIDEwMClcclxuXHJcbiAgICBub1VpU2xpZGUuY3JlYXRlKHRhcmdldCwge1xyXG4gICAgICAgIHN0YXJ0OiBbMjAsIDgwXSxcclxuICAgICAgICBjb25uZWN0OiB0cnVlLFxyXG4gICAgICAgIHN0ZXA6IDEwLFxyXG4gICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICAgICdtaW4nOiAwLFxyXG4gICAgICAgICAgICAnbWF4JzogMTAwXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGFyZ2V0Lm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsIGZ1bmN0aW9uICh2YWx1ZXMsIGhhbmRsZSkge1xyXG4gICAgICAgIG1pbi5hdHRyKCd2YWx1ZScsdmFsdWVzWzBdKVxyXG4gICAgICAgIG1heC5hdHRyKCd2YWx1ZScsdmFsdWVzWzFdKVxyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIG1pbi5vbignaW5wdXQnLCAoZSkgPT4ge1xyXG4gICAgICAgIHRhcmdldC5ub1VpU2xpZGVyLnNldChbZS50YXJnZXQudmFsdWUsIG1heC52YWwoKV0pXHJcbiAgICB9KVxyXG4gICAgbWF4Lm9uKCdpbnB1dCcsIChlKSA9PiB7XHJcbiAgICAgICAgdGFyZ2V0Lm5vVWlTbGlkZXIuc2V0KFttaW4udmFsKCksIGUudGFyZ2V0LnZhbHVlXSlcclxuICAgIH0pXHJcbn0iLCJpbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcic7XHJcbmltcG9ydCB7IE5hdmlnYXRpb24sIFBhZ2luYXRpb24gfSBmcm9tICdzd2lwZXIvbW9kdWxlcyc7XHJcbmltcG9ydCB7IHJlbSB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIjtcclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRDYXJkUGFnZSgpIHtcclxuICAgIGluaXRDYXRhbG9nSW1nU3dpcGVyKClcclxuICAgIGRlc2NyaXB0aW9uU2xpZGVyKClcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGluaXRDYXRhbG9nSW1nU3dpcGVyKCkge1xyXG5cclxuICAgIGNvbnN0IHRvcFNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLXBhZ2UtdG9wX19jLWltZy10b3AnKSxcclxuICAgICAgICBib3R0b21TbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZC1wYWdlLXRvcF9fYy1pbWctYm90dG9tJylcclxuXHJcbiAgICBpZiAoIXRvcFNsaWRlciB8fCAhYm90dG9tU2xpZGVyKSByZXR1cm5cclxuXHJcblxyXG4gICAgY29uc3QgdG9wU3dpcGVyID0gbmV3IFN3aXBlcih0b3BTbGlkZXIsIHtcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMyksXHJcbiAgICAgICAgYWxsb3dUb3VjaE1vdmU6IGZhbHNlLFxyXG4gICAgICAgIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogdHJ1ZSxcclxuICAgICAgICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IHRydWUsXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnN0IGJvdHRvbVN3aXBlciA9IG5ldyBTd2lwZXIoYm90dG9tU2xpZGVyLCB7XHJcbiAgICAgICAgbW9kdWxlczogW05hdmlnYXRpb24sIFBhZ2luYXRpb25dLFxyXG4gICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiByZW0oMSksXHJcbiAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgNzY4OiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA0LFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgICAgIGVsOiAnLmNhcmQtcGFnZS10b3BfX2MtaW1nLWJvdHRvbS1wYWdpbmF0aW9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICBwcmV2RWw6ICcuY2FyZC1wYWdlLXRvcF9fYy1pbWctYm90dG9tLXByZXYnLFxyXG4gICAgICAgICAgICBuZXh0RWw6ICcuY2FyZC1wYWdlLXRvcF9fYy1pbWctYm90dG9tLW5leHQnXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICB9KVxyXG4gICAgYm90dG9tU2xpZGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXJkLXBhZ2UtdG9wX19jLWltZy1ib3R0b20tc2xpZGUnKVxyXG4gICAgICAgIC5mb3JFYWNoKChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b3BTd2lwZXIuc2xpZGVUbyhpKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkZXNjcmlwdGlvblNsaWRlcigpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkLXBhZ2UtZGVzY3JpcHRpb25fX2Mtc2xpZGVyJylcclxuICAgIGNvbnN0IGJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2FyZC1wYWdlLWRlc2NyaXB0aW9uX19jLW5hdi1idG4nKVxyXG4gICAgaWYgKCF0YXJnZXQgfHwgIWJ0bnMpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IHN3aXBlciA9IG5ldyBTd2lwZXIodGFyZ2V0LCB7XHJcbiAgICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgICAgICBzcGFjZUJldHdlZW46IHJlbSgzKSxcclxuICAgICAgICBhbGxvd1RvdWNoTW92ZTogZmFsc2UsXHJcbiAgICAgICAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiB0cnVlLFxyXG4gICAgICAgIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogdHJ1ZSxcclxuICAgIH0pXHJcbiAgICBidG5zLmZvckVhY2goKGUsIGkpID0+IHtcclxuICAgICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGJ0bikgPT4ge1xyXG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpKVxyXG4gICAgICAgICAgICBidG5zLmZvckVhY2goKHRvZ2dsZXIpPT4gdG9nZ2xlci5jbGFzc0xpc3QucmVtb3ZlKCdfb3BlbmVkJykpXHJcbiAgICAgICAgICAgIGJ0bi50YXJnZXQuY2xhc3NMaXN0LmFkZCgnX29wZW5lZCcpXHJcbiAgICAgICAgfSlcclxuICAgIH0pXHJcblxyXG5cclxuXHJcbn0iLCJpbXBvcnQgJCBmcm9tIFwianF1ZXJ5XCI7XHJcbmltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyJztcclxuaW1wb3J0IHsgTmF2aWdhdGlvbiwgUGFnaW5hdGlvbiB9IGZyb20gJ3N3aXBlci9tb2R1bGVzJztcclxuaW1wb3J0IHsgcmVtIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50c1wiO1xyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbml0RmVlZEJhY2soKSB7XHJcbiAgICByZXZpZXdPcGVuZXIoKVxyXG4gICAgc3dpcGVyKClcclxuXHJcbn1cclxuZnVuY3Rpb24gc3dpcGVyKCkge1xyXG4gICAgY29uc3Qgc3dpcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrX19jLXNsaWRlcicpXHJcbiAgICBpZiAoIXN3aXBlcikgcmV0dXJuXHJcbiAgICBuZXcgU3dpcGVyKHN3aXBlciwge1xyXG4gICAgICAgIG1vZHVsZXM6IFtOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uXSxcclxuICAgICAgICBsb29wOiBmYWxzZSxcclxuICAgICAgICBhbGxvd1NsaWRlUHJldjogMSxcclxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuICAgICAgICBzcGFjZUJldHdlZW46IHJlbSgzKSxcclxuICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICA3Njg6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgcHJldkVsOiAnLmZlZWRiYWNrX19jLXNsaWRlci1wcmV2JyxcclxuICAgICAgICAgICAgbmV4dEVsOiAnLmZlZWRiYWNrX19jLXNsaWRlci1uZXh0J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICAgICAgICBlbDogJy5mZWVkYmFjay1wYWdpbmF0aW9uJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG59XHJcbmZ1bmN0aW9uIHJldmlld09wZW5lcigpIHtcclxuXHJcbiAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFja19fYy1zbGlkZXItZS1ib2R5JykpIHJldHVyblxyXG5cclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSAkKCcuZmVlZGJhY2tfX2Mtc2xpZGVyJyksXHJcbiAgICAgICAgdGV4dENvbnRhaW5lclNlbGVjdG9yID0gJy5mZWVkYmFja19fYy1zbGlkZXItZS1ib2R5JyxcclxuICAgICAgICB0ZXh0U2VsZWN0b3IgPSAnLmZlZWRiYWNrX19jLXNsaWRlci1lLWJvZHktdHh0JyxcclxuICAgICAgICBzaG9ydGVuZWRUZXh0U2VsZWNvciA9ICdfY2xvc2VkJyxcclxuICAgICAgICBtYXhIZWlnaHQgPSAxNTBcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRleHRTZWxlY3RvcikuZm9yRWFjaCgoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLm9mZnNldEhlaWdodCA+IG1heEhlaWdodCkge1xyXG4gICAgICAgICAgICBlID0gJChlKVxyXG4gICAgICAgICAgICBlLmFkZENsYXNzKHNob3J0ZW5lZFRleHRTZWxlY29yKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlLmNsb3Nlc3QodGV4dENvbnRhaW5lclNlbGVjdG9yKSk7XHJcbiAgICAgICAgICAgIGUuY2xvc2VzdCh0ZXh0Q29udGFpbmVyU2VsZWN0b3IpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCc8YnV0dG9uIGNsYXNzPVwiZmVlZGJhY2tfX2Mtc2xpZGVyLWUtYm9keS1vcGVuZXIgYnRuLW5hdiBidG4tbmF2X3VsIHR4dDE4XCI+0KDQsNC30LLQtdGA0L3Rg9GC0Yw8L2J1dHRvbj4nKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KVxyXG5cclxuICAgIGNvbnRhaW5lci5vbignY2xpY2snLCAoZXYpID0+IHtcclxuICAgICAgICBpZiAoIWV2LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZlZWRiYWNrX19jLXNsaWRlci1lLWJvZHktb3BlbmVyJykpIHJldHVyblxyXG5cclxuICAgICAgICBjb25zdCBwYXJlbnQgPSBldi50YXJnZXQuY2xvc2VzdCh0ZXh0Q29udGFpbmVyU2VsZWN0b3IpXHJcblxyXG4gICAgICAgIGlmICghZXYudGFyZ2V0LmNsb3Nlc3QodGV4dENvbnRhaW5lclNlbGVjdG9yKS5jbGFzc0xpc3QuY29udGFpbnMoJ19vcGVuZWQnKSkge1xyXG4gICAgICAgICAgICBwYXJlbnQuY2xhc3NMaXN0LmFkZCgnX29wZW5lZCcpXHJcbiAgICAgICAgICAgIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRleHRTZWxlY3RvcilcclxuICAgICAgICAgICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKHNob3J0ZW5lZFRleHRTZWxlY29yKVxyXG4gICAgICAgICAgICBldi50YXJnZXQudGV4dENvbnRlbnQgPSAn0YHQstC10YDQvdGD0YLRjCdcclxuXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKCdfb3BlbmVkJylcclxuICAgICAgICAgICAgcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGV4dFNlbGVjdG9yKVxyXG4gICAgICAgICAgICAgICAgLmNsYXNzTGlzdC5hZGQoc2hvcnRlbmVkVGV4dFNlbGVjb3IpXHJcbiAgICAgICAgICAgIGV2LnRhcmdldC50ZXh0Q29udGVudCA9ICfRgNCw0LfQstC10YDQvdGD0YLRjCdcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICB9KVxyXG5cclxufVxyXG4iLCJcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdFNpZ25VcCgpIHtcclxuICAgIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZ24tdXAnKSkgcmV0dXJuXHJcblxyXG5cclxuICAgIGNvbnN0IGJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2lnbi1mb3JtLXN3aXRjaGVyJyksXHJcbiAgICAgICAgc2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZ24tdXBfX2Mtc2xpZGVyJylcclxuXHJcbiAgICBidG5zLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XHJcbiAgICAgICAgICAgc2xpZGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoY2FsYygtJHtlLnRhcmdldC5kYXRhc2V0LnNsaWRldG99MDAlIC0gJHs1MCAqIGUudGFyZ2V0LmRhdGFzZXQuc2xpZGV0b31weCksIDApYFxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdFNlbGVjdGlvbigpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3Rpb25fX2MnKVxyXG4gICAgaWYgKCFjb250YWluZXIpIHJldHVyblxyXG5cclxuICAgIGxldCBzdGF0ZUNvdW50ID0gMVxyXG4gICAgY29uc3QgYnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3Rpb25fX2MtYnRuJyksXHJcbiAgICAgICAgZG9tQ291bnRlciA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0aW9uX19jLXRvcC1jb3VudCcpLFxyXG4gICAgICAgIGFkZEl0ZW1CdG5zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWxlY3Rpb24tYWRkLWl0ZW0nKSxcclxuICAgICAgICBsaXN0cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuaXRlbS1saXN0JylcclxuXHJcblxyXG5cclxuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBzdGF0ZUNvdW50KytcclxuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXN0ZXAnLCBzdGF0ZUNvdW50KVxyXG4gICAgICAgIGRvbUNvdW50ZXIudGV4dENvbnRlbnQgPSBzdGF0ZUNvdW50XHJcbiAgICAgICAgaWYgKHN0YXRlQ291bnQgPiAzKSB7XHJcbiAgICAgICAgICAgIGJ0bi50ZXh0Q29udGVudCA9ICfQlNC+0LHQsNCy0LjRgtGMINCyINC60L7RgNC30LjQvdGDJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgYWRkSXRlbUJ0bnMuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBlLmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnZGl2JykucXVlcnlTZWxlY3RvcigndWwnKSxcclxuICAgICAgICAgICAgICAgIGl0ZW0gPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnbGknKSxcclxuICAgICAgICAgICAgICAgIG5ld2l0ZW0gPSBpdGVtWzBdLmNsb25lTm9kZSh0cnVlKSxcclxuICAgICAgICAgICAgICAgIGNvdW50ZXIgPSBuZXdpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtLWNvdW50JylcclxuXHJcbiAgICAgICAgICAgIG5ld2l0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnaXRlbS1vcmlnaW4nKVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvdW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvdW50ZXIudGV4dENvbnRlbnQgPSBpdGVtLmxlbmd0aCArIDFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5ld2l0ZW0pXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG5cclxuICAgIGxpc3RzLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICh0KSA9PiB7XHJcbiAgICAgICAgICAgIHQgPSB0LnRhcmdldFxyXG4gICAgICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ2l0ZW0tc2VsZnJlbW92ZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0LmNsb3Nlc3QoJ2xpJykucmVtb3ZlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG5cclxuXHJcblxyXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDc5MjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSBmdW5jdGlvbihjaHVua0lkKSB7IHJldHVybiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDA7IH07XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gZnVuY3Rpb24ocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpIHtcblx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcblx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcblx0dmFyIHJ1bnRpbWUgPSBkYXRhWzJdO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoZnVuY3Rpb24oaWQpIHsgcmV0dXJuIGluc3RhbGxlZENodW5rc1tpZF0gIT09IDA7IH0pKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua3dlYnBhY2tfZXhhbXBsZVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt3ZWJwYWNrX2V4YW1wbGVcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs5NzksODgxLDc0OV0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7IH0pXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwiJCIsImhlYWRlck9wZW5lciIsImhlYWRlck1vZGFsIiwib3BlbmVkIiwiaHRtbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIm9uIiwiZXYiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsImZhZGVPdXQiLCJyZW1vdmVDbGFzcyIsImFkZCIsImZhZGVJbiIsImFkZENsYXNzIiwicmVtIiwid2luZG93IiwiaW5uZXJXaWR0aCIsIkZvcm0iLCJjb25zdHJ1Y3RvciIsImZvcm1Eb21FbCIsInN1Ym1pdEZvbyIsInRoaXMiLCJfZm9ybSIsInNldEF0dHJpYnV0ZSIsIl9pbnB1dENvbnRhaW5lclNlbGVjdG9yIiwiX2lucHV0RXJyb3JNc2dTZWxlY3RvciIsIl9pbnB1dEVycm9yU2VsZWN0b3IiLCJfaW5wdXRQbGFjZWhvbGRlclNlbGVjdG9yIiwic3VibWl0Rm9ybSIsIl9pbnB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2lucHV0c0RhdGEiLCJfY3JlYXRlSW5wdXREYXRhIiwiX3Bhc3N3b3JkSW5wdXQiLCJBcnJheSIsImZyb20iLCJmaW5kIiwiZSIsIm5hbWUiLCJfcGFzc3dvcmRSZXBlYXRJbnB1dCIsIl9zdWJtaXRCdG4iLCJpbml0Rm9ybSIsIl9pbnB1dEhhbmRsZXIiLCJpbnB1dFRhcmdldCIsInZhbHVlIiwiX3ZhbGlkYXRpb24iLCJwbGFjZWhvbGRlciIsImNsb3Nlc3QiLCJzdHlsZSIsImRpc3BsYXkiLCJpbnB1dCIsIl9jaGVja0lucHV0VmFsaWQiLCJyZWdleCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInJlZ2V4TXNnIiwiaXNSZXF1aXJlZCIsImlucHV0Q29udGFpbmVyIiwiZXJyb3JNc2ciLCJjb25zb2xlIiwibG9nIiwidGV4dENvbnRlbnQiLCJpc1ZhbGlkIiwicGFzc3dvcmQiLCJnZXRBdHRyaWJ1dGUiLCJjaGVja2VkIiwidGVzdCIsIl9vblN1Ym1pdCIsImV2dCIsIndoYXRzVXAiLCJpbnAiLCJzdWJtaXQiLCJpbnB1dHMiLCJlY2hvIiwicGxjYWhvbGRlciIsImRhdGFzZXQiLCJyZXF1aXJlZCIsInBhc3NidG4iLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJfcGFzc293ckhpZGUiLCJ0eXBlIiwiX2ZpbGVIYW5kbGVyIiwiZGVmYXVsdHYiLCJzcGxpdCIsInNsaWNlIiwibm9WYWxpZGF0ZSIsImZvckVhY2giLCJlbCIsInJ1IiwiSW5wdXRtYXNrIiwiYnIiLCJreiIsInBob25lTWFwIiwiZm9ybVN1Ym1pdCIsImlucHV0RGF0YSIsImlucHV0Q2hhbmdlIiwiRXZlbnQiLCJTd2l0Y2hlciIsImNvbnRhaW5lciIsImluaXRzdGF0ZSIsIl9jb250YWluZXIiLCJfaW5pdFN0YXRlIiwiX2J0blNlbGVjdG9yIiwiX3NsaWRlU2VsZWN0b3IiLCJfZGF0YXNldEJ0biIsIl9kYXRhc2V0U2xpZGUiLCJfYnRucyIsIl9pbml0QnRucyIsIl9zbGlkZXMiLCJfaW5pdFNsaWRlcyIsImxpc3QiLCJpIiwidGFnTmFtZSIsIl9zd2l0Y2hlciIsImN1cnJlbnRUYXJnZXQiLCJzbGlkZSIsImJ0biIsInRvZ2dsZSIsImZvcm1zIiwiZm9ybSIsIm1hc2siLCJwYXJlbnQiLCJpbWFnZUxpbmsiLCJjaGlsZHJlbiIsImF0dHIiLCJ0cmlnZ2VyIiwiaW5pdEZvcm1zIiwiY29tcGxlY3RzIiwiU3dpcGVyIiwibW9kdWxlcyIsIk5hdmlnYXRpb24iLCJQYWdpbmF0aW9uIiwibG9vcCIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJHcm91cCIsInNwYWNlQmV0d2VlbiIsImJyZWFrcG9pbnRzIiwicGFnaW5hdGlvbiIsIm5hdmlnYXRpb24iLCJwcmV2RWwiLCJuZXh0RWwiLCJ3aHlDaG9pY2UiLCJHcmlkIiwiZ3JpZCIsInJvd3MiLCJmaWxsIiwiY2F0ZWdvcmllcyIsInNwY2VpYWxPZmZlciIsImhlYWRpbmciLCJBdXRvcGxheSIsImdyYWJDdXJzb3IiLCJhdXRvcGxheSIsImRlbGF5IiwicGF1c2VPbk1vdXNlRW50ZXIiLCJjbGlja2FibGUiLCJkZWZlbnNlV29yayIsImNhdGFsb2dIZWFkIiwiY2F0YWxvZ0RlZmVuc2UiLCJjYXRlZ29yeUZzIiwiY2hvaWNlU3lzdGVtIiwic3dpcGVyIiwiYWxsb3dUb3VjaE1vdmUiLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJzbGlkZU5leHQiLCJuZXdzRGVhdGFpbCIsImluaXRTd2lwZXJzIiwic2VsZWN0cyIsInNlbGVjdCIsIm9wdGlvbnMiLCJvcHRpb24iLCJkaXNwYXRjaEV2ZW50IiwicmVtb3ZlQXR0cmlidXRlIiwiY2xpY2siLCJpbml0U2VsZWN0Iiwic2Nyb2xsU3RhcnQiLCJzY3JvbGxZIiwiaW5pdE1vYmlsZU5hdiIsIm9wZW5lciIsImNsb3NlciIsImhhc0NsYXNzIiwiaW5pdENhdGFsb2dGaWx0ZXJPcGVuZXIiLCJ0b3BTbGlkZXIiLCJib3R0b21TbGlkZXIiLCJ0b3BTd2lwZXIiLCJzbGlkZVRvIiwiaW5pdENhdGFsb2dJbWdTd2lwZXIiLCJidG5zIiwidG9nZ2xlciIsImRlc2NyaXB0aW9uU2xpZGVyIiwidGV4dENvbnRhaW5lclNlbGVjdG9yIiwidGV4dFNlbGVjdG9yIiwic2hvcnRlbmVkVGV4dFNlbGVjb3IiLCJvZmZzZXRIZWlnaHQiLCJhcHBlbmQiLCJyZXZpZXdPcGVuZXIiLCJhbGxvd1NsaWRlUHJldiIsInNsaWRlciIsInRyYW5zZm9ybSIsInNsaWRldG8iLCJpbml0U2lnblVwIiwibW9kYWxPcGVuZXJzIiwibW9kYWxDbG9zZXJzIiwibW9kYWwiLCJtb2RhbHNIYW5kbGVyIiwiYmFza2V0RGVsaXZlcnkiLCJ1c2VyZGF0YSIsIm1vZGFsQ2RlayIsInN1cHBvcnRMaXN0IiwidXNlclBhZ2UiLCJtb2RhbFNpZ24iLCJpbml0U3dpY2hlcnMiLCJzdGF0ZUNvdW50IiwiZG9tQ291bnRlciIsImFkZEl0ZW1CdG5zIiwibGlzdHMiLCJpdGVtIiwibmV3aXRlbSIsImNsb25lTm9kZSIsImNvdW50ZXIiLCJhcHBlbmRDaGlsZCIsInQiLCJpbml0U2VsZWN0aW9uIiwidmFsdWVJbnB1dCIsInZhbCIsImtleSIsInJlcGxhY2UiLCJyZXMiLCJpbmRleCIsImpvaW4iLCJlcSIsImZvY3VzIiwibW9kYWxNb2JpbGVDb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwibSIsIk8iLCJyZXN1bHQiLCJjaHVua0lkcyIsImZuIiwicHJpb3JpdHkiLCJub3RGdWxmaWxsZWQiLCJJbmZpbml0eSIsImZ1bGZpbGxlZCIsImoiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJzcGxpY2UiLCJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaW5zdGFsbGVkQ2h1bmtzIiwiY2h1bmtJZCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJkYXRhIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImlkIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwic2VsZiIsImJpbmQiLCJwdXNoIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=